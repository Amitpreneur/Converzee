{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/ExitIntent/Media.js\";\nimport React, { Component } from \"react\";\nimport Uploader from \"../../../comman/Uploader\";\nimport { parseImgUrl } from \"../../../Util\";\nimport Switch1 from \"../../../comman/Switch\";\nexport default class Media extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      url: this.props.url,\n      mediaType: this.props.mediaType\n    };\n\n    this.onUploadDone = image => {\n      this.setState({\n        url: image.image\n      }, () => {\n        this.props.onChange({\n          url: this.state.url\n        });\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        url: e.target.value\n      }, () => {\n        this.props.onChange({\n          url: this.state.url\n        });\n      });\n    };\n\n    this.isImg = () => {\n      return this.props.mediaType === \"IMAGE\";\n    };\n\n    this.onReset = () => {\n      this.setState({\n        url: \"\"\n      }, () => {\n        this.props.onChange({\n          url: this.state.url\n        });\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onChange({\n      url: this.state.url,\n      mediaType: this.state.mediaType\n    });\n  }\n\n  render() {\n    const props = {\n      onUploadDone: this.onUploadDone\n    };\n    const {\n      url\n    } = this.state;\n    const {\n      mediaType,\n      isInput\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, !isInput ? React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, mediaType === \"IMAGE\" ? \"Image\" : \"Video\") : null, !isInput ? React.createElement(Switch1, {\n      isChecked: this.props.mediaType === \"IMAGE\",\n      onChange: status => {\n        this.setState({\n          mediaType: status ? \"IMAGE\" : \"VIDEO\"\n        }, () => {\n          this.props.onChange({\n            mediaType: this.state.mediaType\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }) : null), !isInput ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      style: mediaType === \"IMAGE\" ? {} : {\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Uploader, Object.assign({}, props, {\n      onReset: this.onReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"URL*\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"url\",\n      className: \"form-control\",\n      value: url,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }))) : null);\n  }\n\n}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/ExitIntent/Media.js"],"names":["React","Component","Uploader","parseImgUrl","Switch1","Media","state","url","props","mediaType","onUploadDone","image","setState","onChange","e","target","value","isImg","onReset","componentWillUnmount","render","isInput","status","pointerEvents"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Uploader from \"../../../comman/Uploader\";\nimport { parseImgUrl } from \"../../../Util\";\nimport Switch1 from \"../../../comman/Switch\";\nexport default class Media extends Component {\n  state = { url: this.props.url, mediaType: this.props.mediaType };\n  componentWillUnmount() {\n    this.props.onChange({ url: this.state.url, mediaType: this.state.mediaType });\n  }\n  onUploadDone = (image) => {\n    this.setState({ url: image.image }, () => {\n      this.props.onChange({ url: this.state.url });\n    });\n  };\n  onChange = (e) => {\n    this.setState({ url: e.target.value }, () => {\n      this.props.onChange({ url: this.state.url });\n    });\n  };\n  isImg = () => {\n    return this.props.mediaType === \"IMAGE\";\n  };\n  onReset = () => {\n    this.setState({ url: \"\" }, () => {\n      this.props.onChange({ url: this.state.url });\n    });\n  };\n  render() {\n    const props = {\n      onUploadDone: this.onUploadDone,\n    };\n    const { url } = this.state;\n    const { mediaType, isInput } = this.props;\n    return (\n      <div>\n        <div className=\"col-12\">\n          {!isInput ? <label>{mediaType === \"IMAGE\" ? \"Image\" : \"Video\"}</label> : null}\n          {!isInput ? (\n            <Switch1\n              isChecked={this.props.mediaType === \"IMAGE\"}\n              onChange={(status) => {\n                this.setState({ mediaType: status ? \"IMAGE\" : \"VIDEO\" }, () => {\n                  this.props.onChange({ mediaType: this.state.mediaType });\n                });\n              }}\n            />\n          ) : null}\n        </div>\n        {!isInput ? (\n          <React.Fragment>\n            <div className=\"col-12\" style={mediaType === \"IMAGE\" ? {} : { pointerEvents: \"none\" }}>\n              <Uploader {...props} onReset={this.onReset} />\n            </div>\n            <div className=\"form-element\">\n              <div className=\"label-text\">URL*</div>\n              <input type=\"text\" name=\"url\" className=\"form-control\" value={url} onChange={this.onChange} />\n            </div>\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}