{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/VideoPopup/Preview.js\";\nimport React, { Component } from \"react\";\nimport \"./Preview.css\";\nimport { parseImgUrl, youtubeUrlParse, viemoUrlParse } from \"../../../Util\";\nimport Portal from \"../../../comman/Portal\";\nexport default class Preview extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getStyle = () => {\n      const {\n        elements\n      } = this.props.STYLE;\n      const style = {};\n      Object.assign(style, {\n        background: this.getcolor(elements, \"background\")\n      });\n      return style;\n    };\n\n    this.isUrlVideo = url => {\n      if (url.indexOf(\"youtube\") !== -1 || url.indexOf(\"youtu\") !== -1 || url.indexOf(\"viemo\") !== -1) {\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  getcolor(element, key) {\n    let color = \"#fff\";\n    element.forEach(value => {\n      if (value.name === key) {\n        color = value.color;\n      }\n    });\n    return color;\n  }\n\n  getVideoURL(url) {\n    return parseImgUrl(url);\n  }\n\n  render() {\n    const video = this.props.video.url || \"\";\n    const style = {}; //this.getStyle();\n\n    const autoPlayvideo = this.props.STYLE.switchElement || false;\n    return React.createElement(Portal, {\n      defaultOpen: true,\n      closeOnEsc: true,\n      closeOnOutsideClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image-popup\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image-preview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"popUpTitlebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image-main-preview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: \"700px\",\n        width: \"70%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => {\n        this.props.closePopup();\n      },\n      className: \"popupCloseButton\",\n      style: {\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      style: {\n        paddingLeft: \"102%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), this.isUrlVideo(video) ? React.createElement(\"iframe\", {\n      width: \"100%\",\n      height: \"100%\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      src: \"https://www.youtube.com/embed/\" + youtubeUrlParse(video) + (autoPlayvideo ? \"?autoplay=1\" : \"\"),\n      frameborder: \"0\",\n      allowfullscreen: true,\n      auto: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(\"iframe\", {\n      width: \"100%\",\n      height: \"100%\",\n      frameborder: \"0\",\n      allowfullscreen: true,\n      src: \"https://player.vimeo.com/video/\" + viemoUrlParse(video) + (autoPlayvideo ? \"?autoplay=1\" : \"\"),\n      frameborder: \"0\",\n      allowfullscreen: true,\n      auto: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/VideoPopup/Preview.js"],"names":["React","Component","parseImgUrl","youtubeUrlParse","viemoUrlParse","Portal","Preview","getStyle","elements","props","STYLE","style","Object","assign","background","getcolor","isUrlVideo","url","indexOf","element","key","color","forEach","value","name","getVideoURL","render","video","autoPlayvideo","switchElement","height","width","closePopup","position","paddingLeft"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,aAAvC,QAA4D,eAA5D;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,eAAe,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;;AAAA,SAC7CM,QAD6C,GAClC,MAAM;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAAL,CAAWC,KAAhC;AACA,YAAMC,KAAK,GAAG,EAAd;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEG,QAAAA,UAAU,EAAE,KAAKC,QAAL,CAAcP,QAAd,EAAwB,YAAxB;AAAd,OAArB;AACA,aAAOG,KAAP;AACD,KAN4C;;AAAA,SAgB7CK,UAhB6C,GAgB/BC,GAAD,IAAS;AACpB,UAAIA,GAAG,CAACC,OAAJ,CAAY,SAAZ,MAA2B,CAAC,CAA5B,IAAiCD,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA3D,IAAgED,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9F,EAAiG;AAC/F,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KArB4C;AAAA;;AAO7CH,EAAAA,QAAQ,CAACI,OAAD,EAAUC,GAAV,EAAe;AACrB,QAAIC,KAAK,GAAG,MAAZ;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAiBC,KAAD,IAAW;AACzB,UAAIA,KAAK,CAACC,IAAN,KAAeJ,GAAnB,EAAwB;AACtBC,QAAAA,KAAK,GAAGE,KAAK,CAACF,KAAd;AACD;AACF,KAJD;AAKA,WAAOA,KAAP;AACD;;AAODI,EAAAA,WAAW,CAACR,GAAD,EAAM;AACf,WAAOf,WAAW,CAACe,GAAD,CAAlB;AACD;;AACDS,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKlB,KAAL,CAAWkB,KAAX,CAAiBV,GAAjB,IAAwB,EAAtC;AACA,UAAMN,KAAK,GAAG,EAAd,CAFO,CAEW;;AAClB,UAAMiB,aAAa,GAAG,KAAKnB,KAAL,CAAWC,KAAX,CAAiBmB,aAAjB,IAAkC,KAAxD;AACA,WACE,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,IAArB;AAA2B,MAAA,UAAU,EAAE,IAAvC;AAA6C,MAAA,mBAAmB,EAAE,IAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,KAAK,EAAElB,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAE;AAAEmB,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKtB,KAAL,CAAWuB,UAAX;AACD,OAHH;AAIE,MAAA,SAAS,EAAC,kBAJZ;AAKE,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAG,MAAA,SAAS,EAAC,aAAb;AAA2B,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF,EAUG,KAAKlB,UAAL,CAAgBW,KAAhB,IACC;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,MAAM,EAAC,MAFT;AAGE,MAAA,WAAW,EAAC,GAHd;AAIE,MAAA,KAAK,EAAC,yEAJR;AAKE,MAAA,eAAe,MALjB;AAME,MAAA,GAAG,EAAE,mCAAmCxB,eAAe,CAACwB,KAAD,CAAlD,IAA6DC,aAAa,GAAG,aAAH,GAAmB,EAA7F,CANP;AAOE,MAAA,WAAW,EAAC,GAPd;AAQE,MAAA,eAAe,MARjB;AASE,MAAA,IAAI,MATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAaC;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,MAAM,EAAC,MAFT;AAGE,MAAA,WAAW,EAAC,GAHd;AAIE,MAAA,eAAe,MAJjB;AAKE,MAAA,GAAG,EAAE,oCAAoCxB,aAAa,CAACuB,KAAD,CAAjD,IAA4DC,aAAa,GAAG,aAAH,GAAmB,EAA5F,CALP;AAME,MAAA,WAAW,EAAC,GANd;AAOE,MAAA,eAAe,MAPjB;AAQE,MAAA,IAAI,MARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,CADF,CADF,CAFF,CADF,CADF,CADF;AAkDD;;AA/E4C","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Preview.css\";\nimport { parseImgUrl, youtubeUrlParse, viemoUrlParse } from \"../../../Util\";\nimport Portal from \"../../../comman/Portal\";\nexport default class Preview extends Component {\n  getStyle = () => {\n    const { elements } = this.props.STYLE;\n    const style = {};\n    Object.assign(style, { background: this.getcolor(elements, \"background\") });\n    return style;\n  };\n  getcolor(element, key) {\n    let color = \"#fff\";\n    element.forEach((value) => {\n      if (value.name === key) {\n        color = value.color;\n      }\n    });\n    return color;\n  }\n  isUrlVideo = (url) => {\n    if (url.indexOf(\"youtube\") !== -1 || url.indexOf(\"youtu\") !== -1 || url.indexOf(\"viemo\") !== -1) {\n      return true;\n    }\n    return false;\n  };\n  getVideoURL(url) {\n    return parseImgUrl(url);\n  }\n  render() {\n    const video = this.props.video.url || \"\";\n    const style = {}; //this.getStyle();\n    const autoPlayvideo = this.props.STYLE.switchElement || false;\n    return (\n      <Portal defaultOpen={true} closeOnEsc={true} closeOnOutsideClick={true}>\n        <div className=\"image-popup\" style={style}>\n          <div className=\"image-preview\">\n            <div className=\"popUpTitlebar\"></div>\n            <center>\n              <div className=\"image-main-preview\">\n                <div style={{ height: \"700px\", width: \"70%\" }}>\n                  <div\n                    onClick={() => {\n                      this.props.closePopup();\n                    }}\n                    className=\"popupCloseButton\"\n                    style={{ position: \"relative\" }}\n                  >\n                    <i className=\"fa fa-close\" style={{ paddingLeft: \"102%\" }} />\n                  </div>\n                  {this.isUrlVideo(video) ? (\n                    <iframe\n                      width=\"100%\"\n                      height=\"100%\"\n                      frameborder=\"0\"\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                      allowfullscreen\n                      src={\"https://www.youtube.com/embed/\" + youtubeUrlParse(video) + (autoPlayvideo ? \"?autoplay=1\" : \"\")}\n                      frameborder=\"0\"\n                      allowfullscreen\n                      auto\n                    ></iframe>\n                  ) : (\n                    <iframe\n                      width=\"100%\"\n                      height=\"100%\"\n                      frameborder=\"0\"\n                      allowfullscreen\n                      src={\"https://player.vimeo.com/video/\" + viemoUrlParse(video) + (autoPlayvideo ? \"?autoplay=1\" : \"\")}\n                      frameborder=\"0\"\n                      allowfullscreen\n                      auto\n                    ></iframe>\n                  )}\n                </div>\n\n                {/* <img src={BASE_URL + parseImgUrl(video)} /> */}\n              </div>\n            </center>\n          </div>\n        </div>\n      </Portal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}