{"ast":null,"code":"import RequestHandler from \"../../actions/RequestHandler\";\nimport { GET_USERS } from \"../../actions/URLs\";\nexport function getUserList() {\n  let userType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let cb = arguments.length > 1 ? arguments[1] : undefined;\n  const getType = userType ? GET_USERS + \"/\" + userType : GET_USERS; // return new Promise((resolve, reject) => {\n\n  RequestHandler.PostRequest(getType, {}, (res, err) => {\n    if (res) cb(res.data.data, null);else cb(null, \"Error\");\n  }); // });\n}\nexport const parseUserData = function (data) {\n  const newData = new Array();\n  data.forEach(e => {\n    newData.push({\n      id: e._id,\n      firstname: e.firstname,\n      email: e.email,\n      isActive: e.isActive,\n      date: e.createdAt,\n      logs: e.logs ? e.logs : {}\n    });\n  });\n  return newData;\n};\nexport const parseResellerData = function (data) {\n  const newData = new Array();\n  data.forEach(e => {\n    newData.push({\n      id: e._id,\n      firstname: e.firstname,\n      email: e.email,\n      isActive: e.isActive,\n      date: e.createdAt,\n      totallicence: e.totallicence,\n      consumeLicence: e.consumeLicence,\n      logs: e.logs ? e.logs : {}\n    });\n  });\n  return newData;\n};\nexport const parseLinkData = function (data) {\n  const newData = new Array();\n  data.forEach(e => {\n    newData.push({\n      id: e._id,\n      name: e.name,\n      url: e.url\n    });\n  });\n  return newData;\n};","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/comman/TableWithData.js"],"names":["RequestHandler","GET_USERS","getUserList","userType","cb","getType","PostRequest","res","err","data","parseUserData","newData","Array","forEach","e","push","id","_id","firstname","email","isActive","date","createdAt","logs","parseResellerData","totallicence","consumeLicence","parseLinkData","name","url"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAO,SAASC,WAAT,GAA0C;AAAA,MAArBC,QAAqB,uEAAV,IAAU;AAAA,MAAJC,EAAI;AAC/C,QAAMC,OAAO,GAAGF,QAAQ,GAAGF,SAAS,GAAG,GAAZ,GAAkBE,QAArB,GAAgCF,SAAxD,CAD+C,CAE/C;;AACAD,EAAAA,cAAc,CAACM,WAAf,CAA2BD,OAA3B,EAAoC,EAApC,EAAwC,CAACE,GAAD,EAAMC,GAAN,KAAc;AACpD,QAAID,GAAJ,EAASH,EAAE,CAACG,GAAG,CAACE,IAAJ,CAASA,IAAV,EAAgB,IAAhB,CAAF,CAAT,KACKL,EAAE,CAAC,IAAD,EAAO,OAAP,CAAF;AACN,GAHD,EAH+C,CAO/C;AACD;AAED,OAAO,MAAMM,aAAa,GAAG,UAASD,IAAT,EAAe;AAC1C,QAAME,OAAO,GAAG,IAAIC,KAAJ,EAAhB;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAaC,CAAC,IAAI;AAChBH,IAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,MAAAA,EAAE,EAAEF,CAAC,CAACG,GADK;AAEXC,MAAAA,SAAS,EAAEJ,CAAC,CAACI,SAFF;AAGXC,MAAAA,KAAK,EAAEL,CAAC,CAACK,KAHE;AAIXC,MAAAA,QAAQ,EAAEN,CAAC,CAACM,QAJD;AAKXC,MAAAA,IAAI,EAAEP,CAAC,CAACQ,SALG;AAMXC,MAAAA,IAAI,EAAET,CAAC,CAACS,IAAF,GAAST,CAAC,CAACS,IAAX,GAAkB;AANb,KAAb;AAQD,GATD;AAUA,SAAOZ,OAAP;AACD,CAbM;AAeP,OAAO,MAAMa,iBAAiB,GAAG,UAASf,IAAT,EAAe;AAC9C,QAAME,OAAO,GAAG,IAAIC,KAAJ,EAAhB;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAaC,CAAC,IAAI;AAChBH,IAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,MAAAA,EAAE,EAAEF,CAAC,CAACG,GADK;AAEXC,MAAAA,SAAS,EAAEJ,CAAC,CAACI,SAFF;AAGXC,MAAAA,KAAK,EAAEL,CAAC,CAACK,KAHE;AAIXC,MAAAA,QAAQ,EAAEN,CAAC,CAACM,QAJD;AAKXC,MAAAA,IAAI,EAAEP,CAAC,CAACQ,SALG;AAMXG,MAAAA,YAAY,EAAEX,CAAC,CAACW,YANL;AAOXC,MAAAA,cAAc,EAAEZ,CAAC,CAACY,cAPP;AAQXH,MAAAA,IAAI,EAAET,CAAC,CAACS,IAAF,GAAST,CAAC,CAACS,IAAX,GAAkB;AARb,KAAb;AAUD,GAXD;AAYA,SAAOZ,OAAP;AACD,CAfM;AAiBP,OAAO,MAAMgB,aAAa,GAAG,UAASlB,IAAT,EAAe;AAC1C,QAAME,OAAO,GAAG,IAAIC,KAAJ,EAAhB;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAaC,CAAC,IAAI;AAChBH,IAAAA,OAAO,CAACI,IAAR,CAAa;AACXC,MAAAA,EAAE,EAAEF,CAAC,CAACG,GADK;AAEXW,MAAAA,IAAI,EAAEd,CAAC,CAACc,IAFG;AAGXC,MAAAA,GAAG,EAAEf,CAAC,CAACe;AAHI,KAAb;AAKD,GAND;AAOA,SAAOlB,OAAP;AACD,CAVM","sourcesContent":["import RequestHandler from \"../../actions/RequestHandler\";\r\nimport { GET_USERS } from \"../../actions/URLs\";\r\n\r\nexport function getUserList(userType = null, cb) {\r\n  const getType = userType ? GET_USERS + \"/\" + userType : GET_USERS;\r\n  // return new Promise((resolve, reject) => {\r\n  RequestHandler.PostRequest(getType, {}, (res, err) => {\r\n    if (res) cb(res.data.data, null);\r\n    else cb(null, \"Error\");\r\n  });\r\n  // });\r\n}\r\n\r\nexport const parseUserData = function(data) {\r\n  const newData = new Array();\r\n  data.forEach(e => {\r\n    newData.push({\r\n      id: e._id,\r\n      firstname: e.firstname,\r\n      email: e.email,\r\n      isActive: e.isActive,\r\n      date: e.createdAt,\r\n      logs: e.logs ? e.logs : {}\r\n    });\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const parseResellerData = function(data) {\r\n  const newData = new Array();\r\n  data.forEach(e => {\r\n    newData.push({\r\n      id: e._id,\r\n      firstname: e.firstname,\r\n      email: e.email,\r\n      isActive: e.isActive,\r\n      date: e.createdAt,\r\n      totallicence: e.totallicence,\r\n      consumeLicence: e.consumeLicence,\r\n      logs: e.logs ? e.logs : {}\r\n    });\r\n  });\r\n  return newData;\r\n};\r\n\r\nexport const parseLinkData = function(data) {\r\n  const newData = new Array();\r\n  data.forEach(e => {\r\n    newData.push({\r\n      id: e._id,\r\n      name: e.name,\r\n      url: e.url,\r\n    });\r\n  });\r\n  return newData;\r\n};"]},"metadata":{},"sourceType":"module"}