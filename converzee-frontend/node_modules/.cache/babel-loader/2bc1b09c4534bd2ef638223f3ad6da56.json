{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/OptinForm/Responders.js\";\nimport React, { Component } from \"react\";\nimport Editor from \"../comman/Editor\";\nimport { Switch } from \"antd\";\nimport RequestHandler from \"../../actions/RequestHandler\";\nimport { Link } from \"react-router-dom\";\nimport { GET_AUTO_RESPONDER, GET_LIST_FROM_AUTORESPONDER, SAVE_LIST_ID } from \"../../actions/URLs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Responders extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      auto_data: [{\n        id: 1,\n        name: 'Mailchimp',\n        serverName: 'MAILCHIMP',\n        icon: '/asset/auto/mailchimp.png',\n        stateName: \"mailChimp\",\n        active: false\n      }, {\n        id: 2,\n        name: 'Active Campaign',\n        serverName: 'ACTIVE_CAMPAIGN',\n        icon: '/asset/auto/activecampaign.png',\n        stateName: \"activeCampaign\",\n        active: false\n      }, {\n        id: 3,\n        name: 'Aweber',\n        serverName: 'AWEBER',\n        icon: '/asset/auto/aweber.png',\n        stateName: \"aweber\",\n        active: false\n      }, {\n        id: 4,\n        name: 'Constant Contact',\n        serverName: 'CONSTANT_CONTACT',\n        icon: 'asset/auto/constant_contact.png',\n        stateName: \"constantContact\",\n        active: false\n      }, {\n        id: 5,\n        name: 'Convert Kit',\n        serverName: 'CONVERT_KIT',\n        icon: 'asset/auto/convertkit.png',\n        stateName: \"convertKit\",\n        active: false\n      }, {\n        id: 6,\n        name: 'Infusion Soft',\n        serverName: 'INFUSION_SOFT',\n        icon: 'asset/auto/infusionsoft.png',\n        stateName: \"infusionSoft\",\n        active: false\n      }, {\n        id: 7,\n        name: 'Sendiio',\n        serverName: 'SENDIIO',\n        icon: 'asset/auto/sendiio.png',\n        stateName: \"sendiio\",\n        active: false\n      }, {\n        id: 8,\n        name: 'Mailvio',\n        serverName: 'MAILVIO',\n        icon: 'asset/auto/mailvio.png',\n        stateName: \"mailVio\",\n        active: false\n      }, {\n        id: 9,\n        name: 'Getresponse',\n        serverName: 'GETRESPONSE',\n        icon: 'asset/auto/getresponse.png',\n        stateName: \"getResponse\",\n        active: false\n      }, {\n        id: 10,\n        name: 'Sendlane',\n        serverName: 'SENDLANE',\n        icon: 'asset/auto/sendlane.png',\n        stateName: \"sendlane\",\n        active: false\n      }, {\n        id: 11,\n        name: 'Custom',\n        serverName: 'CUSTOM',\n        icon: 'asset/auto/custom_html.png',\n        stateName: \"custom\",\n        active: false\n      }],\n      lists: [],\n      uid: \"\",\n      mailServer: \"\",\n      isLists: false,\n      customList: [],\n      ctAr: false\n    };\n\n    this.onSave = () => {\n      const mailData = {\n        uid: this.state.uid,\n        mailServer: this.state.mailServer\n      };\n      RequestHandler.PostRequest(SAVE_LIST_ID, {\n        userData: { ...mailData\n        }\n      }, (res, err) => {\n        if (res) {\n          if (res.data.success) {\n            window.gs.success(true, \"Autoresponder Save Successfully\");\n          } else {\n            window.gs.success(false, res.data.message);\n          }\n        } else {\n          window.gs.success(false, \"Something Went Wrong\");\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    RequestHandler.PostRequest(GET_AUTO_RESPONDER, {}, (res, err) => {\n      if (res.data.success) {\n        let auto_data = this.state.auto_data,\n            autoresponderData = res.data.autoResponder,\n            newFormData = res.data.displayData,\n            arList = [];\n\n        if (autoresponderData.length > 0) {\n          for (let i = 0; i < auto_data.length; i++) {\n            for (let j = 0; j < autoresponderData.length; j++) {\n              this.setState({\n                mailServer: autoresponderData[0].mailServer\n              });\n\n              if (auto_data[i].serverName === autoresponderData[j].mailServer) {\n                auto_data[i].active = true;\n              }\n            }\n          }\n\n          this.getListFromAutoResponder(autoresponderData[0].mailServer, '');\n        }\n\n        if (newFormData.length > 0) {\n          auto_data[auto_data.length - 1].active = true;\n\n          for (let k = 0; k < newFormData.length; k++) {\n            arList.push({\n              id: newFormData[k]._id,\n              name: newFormData[k].name,\n              formData: newFormData[k].formData\n            });\n          }\n        }\n\n        this.setState({\n          auto_data: auto_data,\n          isLists: newFormData.length > 0 || autoresponderData.length > 0 ? true : false,\n          customList: arList\n        });\n      } else {\n        window.gs.success(false, \"Something Went Wrong\");\n      }\n    });\n  }\n\n  getListFromAutoResponder(mailServer, e) {\n    if (mailServer === \"CUSTOM\") {\n      this.setState({\n        ctAr: true\n      }, () => {});\n    } else {\n      let data = {\n        action: \"getList\",\n        responder: mailServer\n      };\n      RequestHandler.PostRequest(GET_LIST_FROM_AUTORESPONDER, data, (res, err) => {\n        if (res) {\n          let respData = res.data;\n\n          if (respData.lists) {\n            let auto_data = this.state.auto_data;\n            auto_data.forEach(el => {\n              if (el.serverName === mailServer) {\n                this.setState({\n                  lists: respData.lists,\n                  mailServer: mailServer,\n                  ctAr: false\n                });\n              }\n            });\n          } else {\n            window.gs.success(false, res.data.message);\n          }\n        } else {\n          window.gs.success(false, \"Something Went Wrong\");\n        }\n      });\n    }\n\n    this.props.onChange({\n      mailServer: mailServer\n    }, e);\n  }\n\n  render() {\n    const {\n      auto_data,\n      lists,\n      isLists,\n      customList,\n      ctAr\n    } = this.state;\n    return isLists ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cz_radio_parent row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: auto_data.map((item, index) => {\n          return item.active ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cz_custom_radio\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              onChange: e => this.getListFromAutoResponder(item.serverName, e),\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                className: \"form-check-input\",\n                name: \"responder\",\n                defaultChecked: this.props.mailServer === item.serverName ? true : false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"form-check-label\",\n                children: item.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 19\n          }, this) : null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"cz_responders_column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-elements\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Unique Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"cz_custom_input\",\n              onChange: e => {\n                this.setState({\n                  uid: e.target.value\n                });\n                this.props.onChange({\n                  uid: e.target.value\n                }, e);\n                customList.filter(cc => {\n                  if (cc.id == e.target.value) {\n                    this.props.onChange({\n                      formData: cc.formData\n                    }, e);\n                  }\n                });\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Select List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this), !ctAr ? lists.map((list, i) => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: list.id,\n                  children: list.name\n                }, i + 1, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 28\n                }, this);\n              }) : customList.map((cl, i) => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: cl.id,\n                  children: cl.name\n                }, i + 1, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 28\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cz_empty_box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No AutoResponder available right now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You have not added any AutoResponder so far. Click on the button below to add the AutoResponder.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"cz_btn cz_orange_btn\",\n        to: \"/AUTO_RESPONDER\",\n        children: \"Add AutoResponder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/OptinForm/Responders.js"],"names":["React","Component","Editor","Switch","RequestHandler","Link","GET_AUTO_RESPONDER","GET_LIST_FROM_AUTORESPONDER","SAVE_LIST_ID","Responders","state","auto_data","id","name","serverName","icon","stateName","active","lists","uid","mailServer","isLists","customList","ctAr","onSave","mailData","PostRequest","userData","res","err","data","success","window","gs","message","componentDidMount","autoresponderData","autoResponder","newFormData","displayData","arList","length","i","j","setState","getListFromAutoResponder","k","push","_id","formData","e","action","responder","respData","forEach","el","props","onChange","render","map","item","index","target","value","filter","cc","list","cl"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor from \"../comman/Editor\";\r\nimport { Switch } from \"antd\";\r\nimport RequestHandler from \"../../actions/RequestHandler\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {\r\n  GET_AUTO_RESPONDER,\r\n  GET_LIST_FROM_AUTORESPONDER,\r\n  SAVE_LIST_ID\r\n} from \"../../actions/URLs\";\r\n\r\nexport default class Responders extends Component {\r\n  state = {\r\n    auto_data : [\r\n      {\r\n        id : 1,\r\n        name : 'Mailchimp',\r\n        serverName : 'MAILCHIMP',\r\n        icon : '/asset/auto/mailchimp.png',\r\n        stateName : \"mailChimp\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 2,\r\n        name : 'Active Campaign',\r\n        serverName : 'ACTIVE_CAMPAIGN',\r\n        icon : '/asset/auto/activecampaign.png',\r\n        stateName : \"activeCampaign\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 3,\r\n        name : 'Aweber',\r\n        serverName : 'AWEBER',\r\n        icon : '/asset/auto/aweber.png',\r\n        stateName : \"aweber\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 4,\r\n        name : 'Constant Contact',\r\n        serverName : 'CONSTANT_CONTACT',\r\n        icon : 'asset/auto/constant_contact.png',\r\n        stateName : \"constantContact\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 5,\r\n        name : 'Convert Kit',\r\n        serverName : 'CONVERT_KIT',\r\n        icon : 'asset/auto/convertkit.png',\r\n        stateName : \"convertKit\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 6,\r\n        name : 'Infusion Soft',\r\n        serverName : 'INFUSION_SOFT',\r\n        icon : 'asset/auto/infusionsoft.png',\r\n        stateName : \"infusionSoft\",\r\n        active: false\r\n      },\r\n      \r\n      {\r\n        id : 7,\r\n        name : 'Sendiio',\r\n        serverName : 'SENDIIO',\r\n        icon : 'asset/auto/sendiio.png',\r\n        stateName : \"sendiio\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 8,\r\n        name : 'Mailvio',\r\n        serverName : 'MAILVIO',\r\n        icon : 'asset/auto/mailvio.png',\r\n        stateName : \"mailVio\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 9,\r\n        name : 'Getresponse',\r\n        serverName : 'GETRESPONSE',\r\n        icon : 'asset/auto/getresponse.png',\r\n        stateName : \"getResponse\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 10,\r\n        name : 'Sendlane',\r\n        serverName : 'SENDLANE',\r\n        icon : 'asset/auto/sendlane.png',\r\n        stateName : \"sendlane\",\r\n        active: false\r\n      },\r\n      {\r\n        id : 11,\r\n        name : 'Custom',\r\n        serverName : 'CUSTOM',\r\n        icon : 'asset/auto/custom_html.png',\r\n        stateName : \"custom\",\r\n        active: false\r\n      }\r\n    ],\r\n    lists: [],\r\n    uid: \"\",\r\n    mailServer: \"\",\r\n    isLists: false,\r\n    customList: [],\r\n    ctAr: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    RequestHandler.PostRequest(GET_AUTO_RESPONDER, {} ,(res, err) => {\r\n      if(res.data.success) {\r\n        let auto_data = this.state.auto_data, autoresponderData = res.data.autoResponder, newFormData = res.data.displayData, arList = []; \r\n        if(autoresponderData.length > 0 ) {\r\n          for(let i=0; i<auto_data.length; i++) {\r\n            for(let j=0; j<autoresponderData.length; j++) {\r\n              this.setState({\r\n                mailServer: autoresponderData[0].mailServer\r\n              })\r\n              if(auto_data[i].serverName === autoresponderData[j].mailServer) {\r\n                auto_data[i].active = true;\r\n              }\r\n            }\r\n          }\r\n          this.getListFromAutoResponder(autoresponderData[0].mailServer, '');\r\n        } \r\n        if(newFormData.length>0) {\r\n          auto_data[auto_data.length-1].active = true;\r\n          for(let k=0; k<newFormData.length; k++) {\r\n            arList.push({\r\n              id: newFormData[k]._id, \r\n              name: newFormData[k].name,\r\n              formData: newFormData[k].formData\r\n            });\r\n          }\r\n        }\r\n        this.setState({\r\n          auto_data : auto_data,\r\n          isLists: newFormData.length > 0 || autoresponderData.length > 0 ? true : false,\r\n          customList: arList\r\n        })\r\n        \r\n      } else {\r\n        window.gs.success(false, \"Something Went Wrong\");\r\n      }\r\n    });\r\n  }\r\n\r\n  getListFromAutoResponder(mailServer, e) {\r\n    if(mailServer === \"CUSTOM\") {\r\n      this.setState({ctAr : true} , () => {});\r\n    } else {\r\n      let data = {\r\n        action : \"getList\", \r\n        responder : mailServer\r\n      }\r\n  \r\n      RequestHandler.PostRequest(GET_LIST_FROM_AUTORESPONDER, data, (res,err) => {\r\n        if (res) {\r\n          let respData = res.data;\r\n          if(respData.lists) {\r\n            let auto_data = this.state.auto_data;\r\n            auto_data.forEach( el => {\r\n              if(el.serverName === mailServer) {\r\n                this.setState({\r\n                  lists: respData.lists,\r\n                  mailServer: mailServer,\r\n                  ctAr : false\r\n                });\r\n              }\r\n            })\r\n          } else {\r\n            window.gs.success(false, res.data.message);\r\n          }\r\n        } else {\r\n          window.gs.success(false, \"Something Went Wrong\");\r\n        }\r\n      });\r\n    }\r\n    this.props.onChange({mailServer : mailServer}, e)\r\n  }  \r\n  \r\n  onSave = () => {\r\n    const mailData = {\r\n      uid: this.state.uid,\r\n      mailServer: this.state.mailServer\r\n    }\r\n\r\n    RequestHandler.PostRequest(SAVE_LIST_ID, { userData: { ...mailData } }, (res, err) => {\r\n      if (res) {\r\n        if (res.data.success) {\r\n          window.gs.success(true, \"Autoresponder Save Successfully\");\r\n        } else {\r\n          window.gs.success(false, res.data.message);\r\n        }\r\n      } else {\r\n        window.gs.success(false, \"Something Went Wrong\");\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { auto_data, lists, isLists, customList, ctAr } = this.state;\r\n    return ( isLists ? \r\n        <div className=\"cz_radio_parent row\">\r\n          <div className=\"col-6\">\r\n            {auto_data.map((item, index) =>{\r\n            return ( item.active ? \r\n                  <div className=\"cz_custom_radio\" key={index}>\r\n                    <label key={index} onChange={(e) => this.getListFromAutoResponder(item.serverName, e)}>\r\n                        {/* <input type=\"checkbox\" name=\"responder\"/> */}\r\n                        <input type=\"radio\" className=\"form-check-input\" name=\"responder\" defaultChecked={this.props.mailServer === item.serverName ? true : false}/>\r\n                        <span className=\"form-check-label\" key={index}>\r\n                            {item.name}\r\n                        </span>\r\n                    </label>\r\n                </div> : null\r\n            )\r\n          })}\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <form className=\"cz_responders_column\">\r\n              <div className=\"form-elements\">\r\n                <label>Select Unique Id</label>\r\n                <select className=\"cz_custom_input\" onChange={(e)=> {\r\n                  this.setState({uid: e.target.value});\r\n                  this.props.onChange({uid: e.target.value}, e); \r\n                  customList.filter((cc) => {\r\n                    if(cc.id == e.target.value) {\r\n                      this.props.onChange({formData: cc.formData}, e);\r\n                    }\r\n                  })\r\n                }}>\r\n                  <option>Select List</option>\r\n                  { !ctAr ? lists.map((list, i) => {\r\n                    return(<option key={i+1} value={list.id}>{list.name}</option>)\r\n                  }) : customList.map((cl, i) => {\r\n                    return(<option key={i+1} value={cl.id}>{cl.name}</option>)\r\n                  })}\r\n                </select>\r\n              </div>\r\n              {/* <div className=\"cz_responder_btns\">\r\n                <button className=\"cz_btn cz_orange_btn\" type=\"button\" onClick={() => {\r\n                    this.onSave()}\r\n                  }\r\n                >Submit</button>\r\n              </div> */}\r\n            </form> \r\n          </div>\r\n        </div>\r\n        : <div className=\"cz_empty_box\">\r\n          <h2>No AutoResponder available right now</h2>\r\n          <p>You have not added any AutoResponder so far. Click on the button below to add the AutoResponder.</p>\r\n          <Link className=\"cz_btn cz_orange_btn\" to=\"/AUTO_RESPONDER\">Add AutoResponder</Link>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}