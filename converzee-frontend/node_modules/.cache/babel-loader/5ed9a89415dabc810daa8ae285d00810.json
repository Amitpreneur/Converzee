{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/HelloBar/Preview.js\";\nimport React, { Component } from \"react\";\nimport \"./Preview.css\";\nimport \"./style.css\";\nimport Portal from \"../../../comman/Portal\";\nexport default class Preview extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderCTA = text => {\n      return React.createElement(\"div\", {\n        style: {\n          overflowWrap: \"break-word\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary btn-preview\",\n        dangerouslySetInnerHTML: {\n          __html: text\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }));\n    };\n\n    this.renderText = (text, style = {}) => {\n      const {\n        elements\n      } = this.props.STYLE;\n      Object.assign(style, {\n        backgroundColor: this.getcolor(elements, \"highlight\"),\n        overflowWrap: \"break-word\"\n      });\n      return React.createElement(\"div\", {\n        className: \"horDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: style,\n        dangerouslySetInnerHTML: {\n          __html: text\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    };\n\n    this.getPos = () => {\n      const {\n        helloBarPos\n      } = this.props.create;\n\n      if (helloBarPos === \"bottom\") {\n        return {\n          bottom: \"0px\"\n        };\n      }\n\n      return {\n        top: \"0px\"\n      };\n    };\n\n    this.getTempalte = (templateType, layout, text, bgColor, ctaText, colorBg) => {\n      templateType = layout;\n      layout = 0;\n\n      switch (templateType) {\n        case 0:\n          return React.createElement(\"div\", {\n            className: \"hellobar1\",\n            style: {\n              backgroundColor: colorBg\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"col-md-4 col-sm-6 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar1-text1\",\n            dangerouslySetInnerHTML: {\n              __html: text\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            className: \"col-md-4 col-sm-6 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, React.createElement(\"center\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, this.props.create.codeText), React.createElement(\"div\", {\n            className: \"hellobar1-code-box\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar1-code\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, this.props.create.cpCode)), React.createElement(\"div\", {\n            className: \"hellobar1-copy-button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, \"Copy Code\")))))), React.createElement(\"div\", {\n            className: \"col-md-4 col-sm-12 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar1-button\",\n            style: {\n              backgroundColor: bgColor,\n              color: \"#000\"\n            },\n            dangerouslySetInnerHTML: {\n              __html: ctaText\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }))))));\n\n        case 1:\n          return React.createElement(\"div\", {\n            className: \"hellobar3\",\n            style: {\n              backgroundColor: colorBg\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"col-sm-12 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar3-text1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: text\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          })))))));\n\n        case 2:\n          return React.createElement(\"div\", {\n            className: \"hellobar4\",\n            style: {\n              backgroundColor: colorBg\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"col-lg-1 col-md-12 col-sm-12 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"col-lg-5 col-md-6 col-sm-6 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar4-text1\",\n            dangerouslySetInnerHTML: {\n              __html: text\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            className: \"col-lg-5 col-md-6 col-sm-6 align-self-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hellobar4-button\",\n            style: {\n              backgroundColor: bgColor,\n              color: \"#000\"\n            },\n            dangerouslySetInnerHTML: {\n              __html: ctaText\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }))))));\n\n        default:\n          return null;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setPosition();\n  }\n\n  setPosition() {\n    const element = document.getElementsByClassName(\"sk-top\")[0];\n\n    if (element && this.props.create.helloBarPos !== \"bottom\") {\n      const body = document.getElementsByTagName(\"body\")[0];\n      body.style = \"margin-top:\" + element.offsetHeight + \"px;\";\n    } else if (element) {\n      const body = document.getElementsByTagName(\"body\")[0];\n      body.style = \"margin-bottom:\" + element.offsetHeight + \"px;\";\n    }\n  }\n\n  componentDidUpdate(newProps) {\n    const {\n      helloBarPos\n    } = this.props.create;\n\n    if (helloBarPos !== newProps.create.helloBarPos) {\n      this.setPosition();\n    }\n  }\n\n  componentWillUnmount() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    body.style = \"\";\n  }\n\n  getcolor(element, key) {\n    let color = \"\";\n    element.forEach(value => {\n      if (value.name === key) {\n        color = value.color;\n      }\n    });\n    return color;\n  }\n\n  getText(text) {\n    return React.createElement(\"div\", {\n      className: \"leadengagr--smart-bar-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"leadengagr-element-message\",\n      style: {\n        color: \"rgb(255, 255, 255)\",\n        opacity: 1,\n        transform: \" translateY(0%)\"\n      },\n      dangerouslySetInnerHTML: {\n        __html: text\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n  getCTA(text, bgColor) {\n    return React.createElement(\"div\", {\n      className: \"leadengagr--smart-bar-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https:/app.getleadengagr.com/sign-up\",\n      target: \"_blank\",\n      className: \"leadengagr-button-url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"leadengagr-element__btn-custom leadengagr-element__send-button fix-positon\",\n      style: {\n        backgroundColor: bgColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"leadengagr-element__send-btn-text\",\n      style: {\n        color: \"rgb(0, 0, 0)\"\n      },\n      dangerouslySetInnerHTML: {\n        __html: text\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    const style = {\n      background: \"#3a3abd\"\n    };\n    const elements = this.props.STYLE.elements;\n    Object.assign(style, this.getPos());\n    const layout = this.props.layout;\n    const text = this.props.create.textBody;\n    const buttonText = this.props.cta.ctaText;\n    const color = this.getcolor(elements, \"highlightCTA\");\n    const backgroundColor = this.getcolor(elements, \"highlight\");\n    const templateType = this.props.templateType;\n    return React.createElement(Portal, {\n      defaultOpen: true,\n      closeOnEsc: true,\n      closeOnOutsideClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sk-fixed-height sk-top\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.getTempalte(templateType, layout, text, color, buttonText, backgroundColor)));\n  }\n\n}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/HelloBar/Preview.js"],"names":["React","Component","Portal","Preview","renderCTA","text","overflowWrap","__html","renderText","style","elements","props","STYLE","Object","assign","backgroundColor","getcolor","getPos","helloBarPos","create","bottom","top","getTempalte","templateType","layout","bgColor","ctaText","colorBg","codeText","cpCode","color","componentDidMount","setPosition","element","document","getElementsByClassName","body","getElementsByTagName","offsetHeight","componentDidUpdate","newProps","componentWillUnmount","key","forEach","value","name","getText","opacity","transform","getCTA","render","background","textBody","buttonText","cta"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Preview.css\";\nimport \"./style.css\";\nimport Portal from \"../../../comman/Portal\";\nexport default class Preview extends Component {\n  componentDidMount() {\n    this.setPosition();\n  }\n\n  setPosition() {\n    const element = document.getElementsByClassName(\"sk-top\")[0];\n    if (element && this.props.create.helloBarPos !== \"bottom\") {\n      const body = document.getElementsByTagName(\"body\")[0];\n      body.style = \"margin-top:\" + element.offsetHeight + \"px;\";\n    } else if (element) {\n      const body = document.getElementsByTagName(\"body\")[0];\n      body.style = \"margin-bottom:\" + element.offsetHeight + \"px;\";\n    }\n  }\n\n  componentDidUpdate(newProps) {\n    const { helloBarPos } = this.props.create;\n    if (helloBarPos !== newProps.create.helloBarPos) {\n      this.setPosition();\n    }\n  }\n\n  componentWillUnmount() {\n    const body = document.getElementsByTagName(\"body\")[0];\n    body.style = \"\";\n  }\n  renderCTA = (text) => {\n    return (\n      <div style={{ overflowWrap: \"break-word\" }}>\n        <button className=\"btn btn-primary btn-preview\" dangerouslySetInnerHTML={{ __html: text }}></button>\n      </div>\n    );\n  };\n  renderText = (text, style = {}) => {\n    const { elements } = this.props.STYLE;\n    Object.assign(style, { backgroundColor: this.getcolor(elements, \"highlight\"), overflowWrap: \"break-word\" });\n    return (\n      <div className=\"horDiv\">\n        <div style={style} dangerouslySetInnerHTML={{ __html: text }}></div>\n      </div>\n    );\n  };\n  getPos = () => {\n    const { helloBarPos } = this.props.create;\n    if (helloBarPos === \"bottom\") {\n      return { bottom: \"0px\" };\n    }\n    return { top: \"0px\" };\n  };\n\n  getcolor(element, key) {\n    let color = \"\";\n    element.forEach((value) => {\n      if (value.name === key) {\n        color = value.color;\n      }\n    });\n    return color;\n  }\n  getText(text) {\n    return (\n      <div className=\"leadengagr--smart-bar-padding\">\n        <div className=\"leadengagr-element-message\" style={{ color: \"rgb(255, 255, 255)\", opacity: 1, transform: \" translateY(0%)\" }} dangerouslySetInnerHTML={{ __html: text }}></div>\n      </div>\n    );\n  }\n  getCTA(text, bgColor) {\n    return (\n      <div className=\"leadengagr--smart-bar-padding\">\n        <a href=\"https:/app.getleadengagr.com/sign-up\" target=\"_blank\" className=\"leadengagr-button-url\">\n          <button type=\"button\" className=\"leadengagr-element__btn-custom leadengagr-element__send-button fix-positon\" style={{ backgroundColor: bgColor }}>\n            <span className=\"leadengagr-element__send-btn-text\" style={{ color: \"rgb(0, 0, 0)\" }} dangerouslySetInnerHTML={{ __html: text }}></span>\n          </button>\n        </a>\n      </div>\n    );\n  }\n\n  getTempalte = (templateType, layout, text, bgColor, ctaText, colorBg) => {\n    templateType = layout;\n    layout = 0;\n    switch (templateType) {\n      case 0:\n        return (\n          <div className=\"hellobar1\" style={{ backgroundColor: colorBg }}>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-4 col-sm-6 align-self-center\">\n                  <div className=\"hellobar1-text1\" dangerouslySetInnerHTML={{ __html: text }}></div>\n                </div>\n                <div className=\"col-md-4 col-sm-6 align-self-center\">\n                  <div className=\"text-center\">\n                    <center>\n                      <p>{this.props.create.codeText}</p>\n                      <div className=\"hellobar1-code-box\">\n                        <div className=\"hellobar1-code\">\n                          <p>{this.props.create.cpCode}</p>\n                        </div>\n                        <div className=\"hellobar1-copy-button\">\n                          <p>Copy Code</p>\n                        </div>\n                      </div>\n                    </center>\n                  </div>\n                </div>\n                <div className=\"col-md-4 col-sm-12 align-self-center\">\n                  <div className=\"text-center\">\n                    <div className=\"hellobar1-button\" style={{ backgroundColor: bgColor, color: \"#000\" }} dangerouslySetInnerHTML={{ __html: ctaText }}></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      case 1:\n        return (\n          <div className=\"hellobar3\" style={{ backgroundColor: colorBg }}>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-12 align-self-center\">\n                  <div className=\"text-center\">\n                    <div className=\"hellobar3-text1\">\n                      {/* <span dangerouslySetInnerHTML={{ __html: ctaText }}></span> */}\n                      <span dangerouslySetInnerHTML={{ __html: text }}></span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"hellobar4\" style={{ backgroundColor: colorBg }}>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-lg-1 col-md-12 col-sm-12 align-self-center\"></div>\n                <div className=\"col-lg-5 col-md-6 col-sm-6 align-self-center\">\n                  <div className=\"hellobar4-text1\" dangerouslySetInnerHTML={{ __html: text }}></div>\n                </div>\n                <div className=\"col-lg-5 col-md-6 col-sm-6 align-self-center\">\n                  <div className=\"text-center\">\n                    <div className=\"hellobar4-button\" style={{ backgroundColor: bgColor, color: \"#000\" }} dangerouslySetInnerHTML={{ __html: ctaText }}></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    const style = { background: \"#3a3abd\" };\n    const elements = this.props.STYLE.elements;\n    Object.assign(style, this.getPos());\n    const layout = this.props.layout;\n    const text = this.props.create.textBody;\n    const buttonText = this.props.cta.ctaText;\n    const color = this.getcolor(elements, \"highlightCTA\");\n    const backgroundColor = this.getcolor(elements, \"highlight\");\n    const templateType = this.props.templateType;\n    return (\n      <Portal defaultOpen={true} closeOnEsc={true} closeOnOutsideClick={true}>\n        <div className=\"sk-fixed-height sk-top\" style={style}>\n          {/* {layout === 1 ? (\n              <React.Fragment>\n                {this.getText(text)}\n                {this.getCTA(buttonText, color)}\n              </React.Fragment>\n            ) : null} */}\n          {this.getTempalte(templateType, layout, text, color, buttonText, backgroundColor)}\n        </div>\n      </Portal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}