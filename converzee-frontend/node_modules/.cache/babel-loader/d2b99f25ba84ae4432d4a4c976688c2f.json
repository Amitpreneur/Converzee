{"ast":null,"code":"import React from\"react\";import{CountdownCircleTimer}from\"react-countdown-circle-timer\";import\"./circularClock.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const minuteSeconds=60;const hourSeconds=3600;const daySeconds=86400;const timerProps={isPlaying:true,size:120,strokeWidth:6};const renderTime=(dimension,time)=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"time-wrapper\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"time\",children:time}),/*#__PURE__*/_jsx(\"div\",{children:dimension})]});};const getTimeSeconds=time=>minuteSeconds-time|0;const getTimeMinutes=time=>time%hourSeconds/minuteSeconds|0;const getTimeHours=time=>time%daySeconds/hourSeconds|0;const getTimeDays=time=>time/daySeconds|0;export default function App(props){const stratTime=new Date().getTime();// use UNIX timestamp in seconds\nconst endTime=new Date(props.date);// use UNIX timestamp in seconds\nconst remainingTime=Math.round((new Date(endTime).getTime()-stratTime)/1000);const days=Math.floor(remainingTime/daySeconds);const daysDuration=days*daySeconds;return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(CountdownCircleTimer,{...timerProps,colors:\"#7E2E84\",duration:daysDuration,initialRemainingTime:remainingTime,children:_ref=>{let{elapsedTime,color}=_ref;return/*#__PURE__*/_jsx(\"span\",{style:{color},children:renderTime(\"days\",getTimeDays(daysDuration-elapsedTime))});}}),/*#__PURE__*/_jsx(CountdownCircleTimer,{...timerProps,colors:\"#D14081\",duration:daySeconds,initialRemainingTime:remainingTime%daySeconds,onComplete:totalElapsedTime=>({shouldRepeat:remainingTime-totalElapsedTime>hourSeconds}),children:_ref2=>{let{elapsedTime,color}=_ref2;return/*#__PURE__*/_jsx(\"span\",{style:{color},children:renderTime(\"hours\",getTimeHours(daySeconds-elapsedTime))});}}),/*#__PURE__*/_jsx(CountdownCircleTimer,{...timerProps,colors:\"#EF798A\",duration:hourSeconds,initialRemainingTime:remainingTime%hourSeconds,onComplete:totalElapsedTime=>({shouldRepeat:remainingTime-totalElapsedTime>minuteSeconds}),children:_ref3=>{let{elapsedTime,color}=_ref3;return/*#__PURE__*/_jsx(\"span\",{style:{color},children:renderTime(\"minutes\",getTimeMinutes(hourSeconds-elapsedTime))});}}),/*#__PURE__*/_jsx(CountdownCircleTimer,{...timerProps,colors:\"#218380\",duration:minuteSeconds,initialRemainingTime:remainingTime%minuteSeconds,onComplete:totalElapsedTime=>({shouldRepeat:remainingTime-totalElapsedTime>0}),children:_ref4=>{let{elapsedTime,color}=_ref4;return/*#__PURE__*/_jsx(\"span\",{style:{color},children:renderTime(\"seconds\",getTimeSeconds(elapsedTime))});}})]});}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/Club/circularClock.js"],"names":["React","CountdownCircleTimer","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","App","props","stratTime","Date","getTime","endTime","date","remainingTime","Math","round","days","floor","daysDuration","elapsedTime","color","totalElapsedTime","shouldRepeat"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport \"./circularClock.css\";\r\n\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst daySeconds = 86400;\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 120,\r\n  strokeWidth: 6\r\n};\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\r\nconst getTimeDays = (time) => (time / daySeconds) | 0;\r\n\r\nexport default function App(props) {\r\n  const stratTime = new Date().getTime(); // use UNIX timestamp in seconds\r\n  const endTime = new Date(props.date); // use UNIX timestamp in seconds\r\n\r\n  const remainingTime = Math.round((new Date(endTime).getTime() - stratTime) / 1000);\r\n  const days = Math.floor(remainingTime / daySeconds);\r\n  const daysDuration = days * daySeconds;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#7E2E84\"\r\n        duration={daysDuration}\r\n        initialRemainingTime={remainingTime}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#D14081\"\r\n        duration={daySeconds}\r\n        initialRemainingTime={remainingTime % daySeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > hourSeconds\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#EF798A\"\r\n        duration={hourSeconds}\r\n        initialRemainingTime={remainingTime % hourSeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > minuteSeconds\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#218380\"\r\n        duration={minuteSeconds}\r\n        initialRemainingTime={remainingTime % minuteSeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > 0\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"seconds\", getTimeSeconds(elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}