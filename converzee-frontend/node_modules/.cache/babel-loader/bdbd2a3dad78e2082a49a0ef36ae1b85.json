{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/Club/circularClock.js\";\nimport React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport \"./circularClock.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nconst getTimeSeconds = time => minuteSeconds - time | 0;\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nconst getTimeHours = time => time % daySeconds / hourSeconds | 0;\n\nconst getTimeDays = time => time / daySeconds | 0;\n\nexport default function App(props) {\n  const stratTime = new Date().getTime(); // use UNIX timestamp in seconds\n\n  const endTime = new Date(props.date); // use UNIX timestamp in seconds\n\n  const remainingTime = Math.round((new Date(endTime).getTime() - stratTime) / 1000);\n  const days = Math.floor(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#7E2E84\",\n      duration: daysDuration,\n      initialRemainingTime: remainingTime,\n      children: _ref => {\n        let {\n          elapsedTime,\n          color\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color\n          },\n          children: renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#D14081\",\n      duration: daySeconds,\n      initialRemainingTime: remainingTime % daySeconds,\n      onComplete: totalElapsedTime => ({\n        shouldRepeat: remainingTime - totalElapsedTime > hourSeconds\n      }),\n      children: _ref2 => {\n        let {\n          elapsedTime,\n          color\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color\n          },\n          children: renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#EF798A\",\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => ({\n        shouldRepeat: remainingTime - totalElapsedTime > minuteSeconds\n      }),\n      children: _ref3 => {\n        let {\n          elapsedTime,\n          color\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color\n          },\n          children: renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#218380\",\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: totalElapsedTime => ({\n        shouldRepeat: remainingTime - totalElapsedTime > 0\n      }),\n      children: _ref4 => {\n        let {\n          elapsedTime,\n          color\n        } = _ref4;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color\n          },\n          children: renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/Club/circularClock.js"],"names":["React","CountdownCircleTimer","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","App","props","stratTime","Date","getTime","endTime","date","remainingTime","Math","round","days","floor","daysDuration","elapsedTime","color","totalElapsedTime","shouldRepeat"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport \"./circularClock.css\";\r\n\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst daySeconds = 86400;\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 120,\r\n  strokeWidth: 6\r\n};\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\r\nconst getTimeDays = (time) => (time / daySeconds) | 0;\r\n\r\nexport default function App(props) {\r\n  const stratTime = new Date().getTime(); // use UNIX timestamp in seconds\r\n  const endTime = new Date(props.date); // use UNIX timestamp in seconds\r\n\r\n  const remainingTime = Math.round((new Date(endTime).getTime() - stratTime) / 1000);\r\n  const days = Math.floor(remainingTime / daySeconds);\r\n  const daysDuration = days * daySeconds;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#7E2E84\"\r\n        duration={daysDuration}\r\n        initialRemainingTime={remainingTime}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#D14081\"\r\n        duration={daySeconds}\r\n        initialRemainingTime={remainingTime % daySeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > hourSeconds\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#EF798A\"\r\n        duration={hourSeconds}\r\n        initialRemainingTime={remainingTime % hourSeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > minuteSeconds\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors=\"#218380\"\r\n        duration={minuteSeconds}\r\n        initialRemainingTime={remainingTime % minuteSeconds}\r\n        onComplete={(totalElapsedTime) => ({\r\n          shouldRepeat: remainingTime - totalElapsedTime > 0\r\n        })}\r\n      >\r\n        {({ elapsedTime, color }) => (\r\n          <span style={{ color }}>\r\n            {renderTime(\"seconds\", getTimeSeconds(elapsedTime))}\r\n          </span>\r\n        )}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}