{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/comman/AutoResponderConfig.js\";\nimport React, { PureComponent, useState } from \"react\";\nimport { Input } from \"antd\";\nimport DropDown from \"./DropDown\";\nimport RequestHandler from \"../../actions/RequestHandler\";\nimport { AUTO_RESPONDER, GET_LIST_FROM_MAILCHIMP, GET_LIST_FROM_ACTIVECAMPAIGN } from \"../../actions/URLs\";\nimport ToolUtil from \"../../utils/ToolUtil\";\nimport { CampaignNameInput, LockTool } from \"../comman/Popup\";\nexport default class AutoResponderConfig extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this._mailServers = [{\n      label: \"MailChimp\",\n      value: \"MAILCHIMP\"\n    }, {\n      label: \"Active Campaign\",\n      value: \"ACTIVE_CAMPAIGN\"\n    }, {\n      label: \"Aweber\",\n      value: \"AWEBER\"\n    }];\n    this.state = {\n      mailServer: \"MAILCHIMP\",\n      mailData: {},\n      responderPopup: false,\n      formId: 0,\n      auto_data: [{\n        id: 1,\n        name: 'Mailchimp',\n        serverName: 'MAILCHIMP',\n        icon: '/asset/auto/mailchimp.png'\n      }, {\n        id: 2,\n        name: 'Active Campaign',\n        serverName: 'ACTIVE_CAMPAIGN',\n        icon: '/asset/auto/activecampaign.png'\n      }, {\n        id: 3,\n        name: 'Aweber',\n        serverName: 'AWEBER',\n        icon: '/asset/auto/aweber.png'\n      }\n      /* {\n        id : 3,\n        name : 'Constant Contact',\n        icon : 'asset/auto/constant_contact.png'\n      },\n      {\n        id : 4,\n        name : 'Convert Kit',\n        icon : 'asset/auto/convertkit.png'\n      },\n      {\n        id : 5,\n        name : 'Infusion Soft',\n        icon : 'asset/auto/infusionsoft.png'\n      },\n      \n      {\n        id : 7,\n        name : 'Sendiio',\n        icon : 'asset/auto/sendiio.png'\n      },\n      {\n        id : 8,\n        name : 'Mailvio',\n        icon : 'asset/auto/mailvio.png'\n      },\n      {\n        id : 9,\n        name : 'Getresponse',\n        icon : 'asset/auto/getresponse.png'\n      },\n      {\n        id : 10,\n        name : 'Sendlane',\n        icon : 'asset/auto/sendlane.png'\n      } */\n      ],\n      mailChimp: {\n        apiKey: \"\",\n        uid: \"\",\n        lists: []\n      },\n      activeCampaign: {\n        url: \"\",\n        apiKey: \"\",\n        uid: \"\",\n        lists: []\n      },\n      aweber: {\n        accountId: \"\",\n        uid: \"\",\n        apiKey: \"\"\n      }\n    };\n\n    this.onMailServerChange = value => {\n      this.setState({\n        mailServer: value\n      });\n    };\n\n    this.onSave = data => {\n      const {\n        mailServer\n      } = this.state;\n      this.setState({\n        mailData: {\n          mailServer,\n          ...data\n        }\n      }, () => {\n        this.onInstall();\n      });\n    };\n\n    this.onInstall = () => {\n      const {\n        mailData\n      } = this.state;\n      RequestHandler.PostRequest(AUTO_RESPONDER, {\n        userData: { ...mailData\n        }\n      }, (res, err) => {\n        if (res) {\n          if (res.data.success) {\n            ToolUtil.autoResponder = mailData;\n            window.gs.success(true, \"Autoresponder Save Successfully\");\n            this.setState({\n              responderPopup: false\n            });\n          } else {\n            window.gs.success(false, res.data.message);\n          }\n        } else {\n          window.gs.success(false, \"Something Went Wrong\");\n        }\n      });\n    };\n\n    this.getMailChimpList = e => {\n      this.setState({\n        mailChimp: { ...this.state.mailChimp,\n          apiKey: e.target.value\n        }\n      });\n      let data = {\n        apikey: e.target.value,\n        action: \"getList\",\n        responder: \"Mailchimp\"\n      };\n      RequestHandler.PostRequest(GET_LIST_FROM_MAILCHIMP, data, (res, err) => {\n        if (res) {\n          let respData = res.data;\n\n          if (respData.lists) {\n            this.setState({\n              mailChimp: { ...this.state.mailChimp,\n                lists: respData.lists\n              }\n            });\n          } else {\n            window.gs.success(false, res.data.message);\n          }\n        } else {\n          window.gs.success(false, \"Something Went Wrong\");\n        }\n      });\n    };\n\n    this.getActiveCampaignList = e => {\n      this.setState({\n        activeCampaign: { ...this.state.activeCampaign,\n          apiKey: e.target.value\n        }\n      });\n      let data = {\n        url: this.state.activeCampaign.url,\n        apikey: e.target.value,\n        action: \"getList\",\n        responder: \"ActiveCampaign\"\n      };\n      RequestHandler.PostRequest(GET_LIST_FROM_ACTIVECAMPAIGN, data, (res, err) => {\n        if (res) {\n          let respData = res.data;\n\n          if (respData.lists) {\n            this.setState({\n              activeCampaign: { ...this.state.activeCampaign,\n                lists: respData.lists\n              }\n            });\n          } else {\n            window.gs.success(false, res.data.message);\n          }\n        } else {\n          window.gs.success(false, \"Something Went Wrong\");\n        }\n      });\n    };\n  }\n\n  handleResponderPopup(id, serverName) {\n    this.setState({\n      responderPopup: true,\n      formId: id,\n      mailServer: serverName\n    });\n  }\n\n  componentDidMount() {\n    window.gs.navTitle(\"Setup Auto-Responder\");\n\n    if (ToolUtil.autoResponder) {\n      this.setState({\n        mailServer: ToolUtil.autoResponder.mailServer,\n        mailData: ToolUtil.autoResponder\n      });\n    }\n  }\n\n  render() {\n    const {\n      mailServer,\n      mailData\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"cz_auto_responder_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12 col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cz_responder_box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.auto_data.map((item, index) => {\n      return React.createElement(\"div\", {\n        className: \"cz_responders\",\n        key: index,\n        onClick: () => this.handleResponderPopup(item.id, item.serverName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: item.icon,\n        alt: item.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }));\n    })))), React.createElement(\"div\", {\n      className: this.state.responderPopup === true ? 'cz_autoresponder_popup active' : 'cz_autoresponder_popup',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cz_popup_close\",\n      onClick: () => this.setState({\n        responderPopup: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"cz_popup_box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.formId === 1 ? React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Mailchimp\"), React.createElement(\"div\", {\n      className: \"cz_responder_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Api Key*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter api Key\",\n      value: this.state.mailChimp.apiKey,\n      onChange: e => this.getMailChimpList(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Select Unique Id\"), React.createElement(\"select\", {\n      className: \"cz_custom_input\",\n      onChange: e => this.setState({\n        mailChimp: { ...this.state.mailChimp,\n          uid: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Select List\"), this.state.mailChimp.lists.map((list, i) => {\n      return React.createElement(\"option\", {\n        key: i + 1,\n        value: list.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, list.name);\n    }))), React.createElement(\"div\", {\n      className: \"cz_responder_btns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"cz_btn cz_light_btn\",\n      onClick: () => this.setState({\n        responderPopup: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      className: \"cz_btn cz_orange_btn\",\n      type: \"button\",\n      onClick: () => {\n        // this.setState({ mailServer : \"MAILCHIMP\"}); \n        this.onSave(this.state.mailChimp);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Submit\")))) : null, this.state.formId === 2 ? React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Active Campaign\"), React.createElement(\"div\", {\n      className: \"cz_responder_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"URL*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter url\",\n      value: this.state.activeCampaign.url,\n      onChange: e => this.setState({\n        activeCampaign: { ...this.state.activeCampaign,\n          url: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Api Key*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter api Key\",\n      value: this.state.activeCampaign.apiKey,\n      onChange: e => this.getActiveCampaignList(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Select Unique Id\"), React.createElement(\"select\", {\n      className: \"cz_custom_input\",\n      onChange: e => this.setState({\n        activeCampaign: { ...this.state.activeCampaign,\n          uid: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Select list\"), this.state.activeCampaign.lists.map((list, i) => {\n      return React.createElement(\"option\", {\n        key: i + 1,\n        value: list.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, list.name);\n    }))), React.createElement(\"div\", {\n      className: \"cz_responder_btns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"cz_btn cz_light_btn\",\n      onClick: () => this.setState({\n        responderPopup: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      className: \"cz_btn cz_orange_btn\",\n      type: \"button\",\n      onClick: () => {\n        // this.setState({ mailServer : \"ACTIVE_CAMPAIGN\"});\n        this.onSave(this.state.activeCampaign);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Submit\")))) : null, this.state.formId === 3 ? React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Aweber\"), React.createElement(\"div\", {\n      className: \"cz_responder_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Account ID*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter account id\",\n      value: this.state.aweber.accountId,\n      onChange: e => this.setState({\n        aweber: { ...this.state.aweber,\n          accountId: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"List Unique Id*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter list unique id\",\n      value: this.state.aweber.uid,\n      onChange: e => this.setState({\n        aweber: { ...this.state.aweber,\n          uid: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Api Key*\"), React.createElement(\"input\", {\n      className: \"cz_custom_input\",\n      type: \"text\",\n      placeholder: \"Enter api Key\",\n      value: this.state.aweber.apiKey,\n      onChange: e => this.setState({\n        aweber: { ...this.state.aweber,\n          apiKey: e.target.value\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"cz_responder_btns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"cz_btn cz_light_btn\",\n      onClick: () => this.setState({\n        responderPopup: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      className: \"cz_btn cz_orange_btn\",\n      type: \"button\",\n      onClick: () => {\n        // this.setState({ mailServer : \"AWEBER\"});\n        this.onSave(this.state.aweber);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Submit\")))) : null)));\n  }\n\n} // uid, apiKey = \"\", fname = \"\", lname = \"\", email = \"\"\n\nconst MailChimpConfig = function (props) {\n  const [uid, setUid] = useState(props.uid);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, \"List Unique Id*\"), React.createElement(Input, {\n    placeholder: \"List Unique Id\",\n    value: uid,\n    onChange: e => setUid(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      height: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, \"Api Key*\"), React.createElement(Input, {\n    placeholder: \"Api Key\",\n    value: apiKey,\n    onChange: e => setApiKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-element\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm pull-right ant-btn-primary color-with\",\n    onClick: () => props.onSave({\n      uid,\n      apiKey\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }, \"Save\")));\n};\n\nconst ActiveCampign = function (props) {\n  const [url, setUrl] = useState(props.url);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381\n    },\n    __self: this\n  }, \"Url*\"), React.createElement(Input, {\n    placeholder: \"Url\",\n    value: url,\n    onChange: e => setUrl(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      height: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }, \"Api Key*\"), React.createElement(Input, {\n    placeholder: \"Api Key\",\n    value: apiKey,\n    onChange: e => setApiKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-element\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm pull-right ant-btn-primary color-with\",\n    onClick: () => props.onSave({\n      url,\n      apiKey\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, \"Save\")));\n}; // uid, accountId, key = \"\", fname = \"\", email = \"\"\n\n\nconst AweberConfig = function (props) {\n  const [uid, setUid] = useState(props.uid);\n  const [accountId, setAccountId] = useState(props.accountId);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, \"Account Id*\"), React.createElement(Input, {\n    placeholder: \"Account Id\",\n    value: accountId,\n    onChange: e => setAccountId(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      height: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  }, \"List Unique Id*\"), React.createElement(Input, {\n    placeholder: \"List Unique Id\",\n    value: uid,\n    onChange: e => setUid(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      height: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }, \"Api Key*\"), React.createElement(Input, {\n    placeholder: \"Api Key\",\n    value: apiKey,\n    onChange: e => setApiKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-element\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm pull-right ant-btn-primary color-with\",\n    onClick: () => props.onSave({\n      uid,\n      accountId,\n      apiKey\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412\n    },\n    __self: this\n  }, \"Save\")));\n};","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/comman/AutoResponderConfig.js"],"names":["React","PureComponent","useState","Input","DropDown","RequestHandler","AUTO_RESPONDER","GET_LIST_FROM_MAILCHIMP","GET_LIST_FROM_ACTIVECAMPAIGN","ToolUtil","CampaignNameInput","LockTool","AutoResponderConfig","_mailServers","label","value","state","mailServer","mailData","responderPopup","formId","auto_data","id","name","serverName","icon","mailChimp","apiKey","uid","lists","activeCampaign","url","aweber","accountId","onMailServerChange","setState","onSave","data","onInstall","PostRequest","userData","res","err","success","autoResponder","window","gs","message","getMailChimpList","e","target","apikey","action","responder","respData","getActiveCampaignList","handleResponderPopup","componentDidMount","navTitle","render","map","item","index","list","i","MailChimpConfig","props","setUid","setApiKey","height","ActiveCampign","setUrl","AweberConfig","setAccountId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,cAAT,EAAyBC,uBAAzB,EAAkDC,4BAAlD,QAAsF,oBAAtF;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,iBAA5C;AAEA,eAAe,MAAMC,mBAAN,SAAkCX,aAAlC,CAAgD;AAAA;AAAA;AAAA,SAC7DY,YAD6D,GAC9C,CACb;AAAEC,MAAAA,KAAK,EAAE,WAAT;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KADa,EAEb;AAAED,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KAFa,EAGb;AAAED,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAHa,CAD8C;AAAA,SAO7DC,KAP6D,GAOrD;AACNC,MAAAA,UAAU,EAAE,WADN;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AAGNC,MAAAA,cAAc,EAAC,KAHT;AAINC,MAAAA,MAAM,EAAC,CAJD;AAKNC,MAAAA,SAAS,EAAG,CACV;AACEC,QAAAA,EAAE,EAAG,CADP;AAEEC,QAAAA,IAAI,EAAG,WAFT;AAGEC,QAAAA,UAAU,EAAG,WAHf;AAIEC,QAAAA,IAAI,EAAG;AAJT,OADU,EAOV;AACEH,QAAAA,EAAE,EAAG,CADP;AAEEC,QAAAA,IAAI,EAAG,iBAFT;AAGEC,QAAAA,UAAU,EAAG,iBAHf;AAIEC,QAAAA,IAAI,EAAG;AAJT,OAPU,EAaV;AACEH,QAAAA,EAAE,EAAG,CADP;AAEEC,QAAAA,IAAI,EAAG,QAFT;AAGEC,QAAAA,UAAU,EAAG,QAHf;AAIEC,QAAAA,IAAI,EAAG;AAJT;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBU,OALN;AA6DNC,MAAAA,SAAS,EAAG;AACVC,QAAAA,MAAM,EAAE,EADE;AAEVC,QAAAA,GAAG,EAAE,EAFK;AAGVC,QAAAA,KAAK,EAAE;AAHG,OA7DN;AAkENC,MAAAA,cAAc,EAAG;AACfC,QAAAA,GAAG,EAAE,EADU;AAEfJ,QAAAA,MAAM,EAAE,EAFO;AAGfC,QAAAA,GAAG,EAAE,EAHU;AAIfC,QAAAA,KAAK,EAAE;AAJQ,OAlEX;AAwENG,MAAAA,MAAM,EAAG;AACPC,QAAAA,SAAS,EAAE,EADJ;AAEPL,QAAAA,GAAG,EAAE,EAFE;AAGPD,QAAAA,MAAM,EAAE;AAHD;AAxEH,KAPqD;;AAAA,SAoG7DO,kBApG6D,GAoGvCnB,KAAD,IAAW;AAC9B,WAAKoB,QAAL,CAAc;AAAElB,QAAAA,UAAU,EAAEF;AAAd,OAAd;AACD,KAtG4D;;AAAA,SAwG7DqB,MAxG6D,GAwGnDC,IAAD,IAAU;AACjB,YAAM;AAAEpB,QAAAA;AAAF,UAAiB,KAAKD,KAA5B;AACA,WAAKmB,QAAL,CAAc;AAAEjB,QAAAA,QAAQ,EAAE;AAAED,UAAAA,UAAF;AAAc,aAAGoB;AAAjB;AAAZ,OAAd,EAAqD,MAAM;AACzD,aAAKC,SAAL;AACD,OAFD;AAGD,KA7G4D;;AAAA,SA+G7DA,SA/G6D,GA+GjD,MAAM;AAChB,YAAM;AAAEpB,QAAAA;AAAF,UAAe,KAAKF,KAA1B;AACAX,MAAAA,cAAc,CAACkC,WAAf,CAA2BjC,cAA3B,EAA2C;AAAEkC,QAAAA,QAAQ,EAAE,EAAE,GAAGtB;AAAL;AAAZ,OAA3C,EAA0E,CAACuB,GAAD,EAAMC,GAAN,KAAc;AACtF,YAAID,GAAJ,EAAS;AACP,cAAIA,GAAG,CAACJ,IAAJ,CAASM,OAAb,EAAsB;AACpBlC,YAAAA,QAAQ,CAACmC,aAAT,GAAyB1B,QAAzB;AACA2B,YAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,IAAlB,EAAwB,iCAAxB;AACA,iBAAKR,QAAL,CAAc;AAAChB,cAAAA,cAAc,EAAC;AAAhB,aAAd;AACD,WAJD,MAIO;AACL0B,YAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyBF,GAAG,CAACJ,IAAJ,CAASU,OAAlC;AACD;AACF,SARD,MAQO;AACLF,UAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyB,sBAAzB;AACD;AACF,OAZD;AAaD,KA9H4D;;AAAA,SAgI7DK,gBAhI6D,GAgIzCC,CAAD,IAAO;AACxB,WAAKd,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAG,EAAC,GAAG,KAAKV,KAAL,CAAWU,SAAf;AAA0BC,UAAAA,MAAM,EAAEsB,CAAC,CAACC,MAAF,CAASnC;AAA3C;AAAb,OAAd;AACA,UAAIsB,IAAI,GAAG;AACTc,QAAAA,MAAM,EAAGF,CAAC,CAACC,MAAF,CAASnC,KADT;AAETqC,QAAAA,MAAM,EAAG,SAFA;AAGTC,QAAAA,SAAS,EAAG;AAHH,OAAX;AAKAhD,MAAAA,cAAc,CAACkC,WAAf,CAA2BhC,uBAA3B,EAAoD8B,IAApD,EAA0D,CAACI,GAAD,EAAKC,GAAL,KAAa;AACrE,YAAID,GAAJ,EAAS;AACP,cAAIa,QAAQ,GAAGb,GAAG,CAACJ,IAAnB;;AACA,cAAGiB,QAAQ,CAACzB,KAAZ,EAAmB;AACjB,iBAAKM,QAAL,CAAc;AACZT,cAAAA,SAAS,EAAG,EACV,GAAG,KAAKV,KAAL,CAAWU,SADJ;AAEVG,gBAAAA,KAAK,EAAGyB,QAAQ,CAACzB;AAFP;AADA,aAAd;AAMD,WAPD,MAOO;AACLgB,YAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyBF,GAAG,CAACJ,IAAJ,CAASU,OAAlC;AACD;AACF,SAZD,MAYO;AACLF,UAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyB,sBAAzB;AACD;AACF,OAhBD;AAiBD,KAxJ4D;;AAAA,SA0J7DY,qBA1J6D,GA0JpCN,CAAD,IAAO;AAC7B,WAAKd,QAAL,CAAc;AAACL,QAAAA,cAAc,EAAG,EAAC,GAAG,KAAKd,KAAL,CAAWc,cAAf;AAA+BH,UAAAA,MAAM,EAAEsB,CAAC,CAACC,MAAF,CAASnC;AAAhD;AAAlB,OAAd;AACA,UAAIsB,IAAI,GAAG;AACTN,QAAAA,GAAG,EAAG,KAAKf,KAAL,CAAWc,cAAX,CAA0BC,GADvB;AAEToB,QAAAA,MAAM,EAAGF,CAAC,CAACC,MAAF,CAASnC,KAFT;AAGTqC,QAAAA,MAAM,EAAG,SAHA;AAITC,QAAAA,SAAS,EAAG;AAJH,OAAX;AAMAhD,MAAAA,cAAc,CAACkC,WAAf,CAA2B/B,4BAA3B,EAAyD6B,IAAzD,EAA+D,CAACI,GAAD,EAAKC,GAAL,KAAa;AAC1E,YAAID,GAAJ,EAAS;AACP,cAAIa,QAAQ,GAAGb,GAAG,CAACJ,IAAnB;;AACA,cAAGiB,QAAQ,CAACzB,KAAZ,EAAmB;AACjB,iBAAKM,QAAL,CAAc;AACZL,cAAAA,cAAc,EAAG,EACf,GAAG,KAAKd,KAAL,CAAWc,cADC;AAEfD,gBAAAA,KAAK,EAAGyB,QAAQ,CAACzB;AAFF;AADL,aAAd;AAMD,WAPD,MAOO;AACLgB,YAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyBF,GAAG,CAACJ,IAAJ,CAASU,OAAlC;AACD;AACF,SAZD,MAYO;AACLF,UAAAA,MAAM,CAACC,EAAP,CAAUH,OAAV,CAAkB,KAAlB,EAAyB,sBAAzB;AACD;AACF,OAhBD;AAiBD,KAnL4D;AAAA;;AAsF7Da,EAAAA,oBAAoB,CAAClC,EAAD,EAAKE,UAAL,EAAgB;AAClC,SAAKW,QAAL,CAAc;AACZhB,MAAAA,cAAc,EAAC,IADH;AAEZC,MAAAA,MAAM,EAACE,EAFK;AAGZL,MAAAA,UAAU,EAACO;AAHC,KAAd;AAKD;;AACDiC,EAAAA,iBAAiB,GAAG;AAClBZ,IAAAA,MAAM,CAACC,EAAP,CAAUY,QAAV,CAAmB,sBAAnB;;AACA,QAAIjD,QAAQ,CAACmC,aAAb,EAA4B;AAC1B,WAAKT,QAAL,CAAc;AAAElB,QAAAA,UAAU,EAAER,QAAQ,CAACmC,aAAT,CAAuB3B,UAArC;AAAiDC,QAAAA,QAAQ,EAAET,QAAQ,CAACmC;AAApE,OAAd;AACD;AACF;;AAmFDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1C,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA2B,KAAKF,KAAtC;AACA,WACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKA,KAAL,CAAWK,SAAX,CAAqBuC,GAArB,CAAyB,CAACC,IAAD,EAAOC,KAAP,KAAgB;AACxC,aACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,GAAG,EAAEA,KAApC;AAA2C,QAAA,OAAO,EAAE,MAAI,KAAKN,oBAAL,CAA0BK,IAAI,CAACvC,EAA/B,EAAmCuC,IAAI,CAACrC,UAAxC,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,GAAG,EAAEqC,IAAI,CAACpC,IAAf;AAAqB,QAAA,GAAG,EAAEoC,IAAI,CAACtC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD,KAPA,CADH,CADF,CADF,CAlBF,EAmCE;AAAK,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWG,cAAX,KAA8B,IAA9B,GAAqC,+BAArC,GAAuE,wBAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,OAAO,EAAE,MAAI,KAAKgB,QAAL,CAAc;AAAChB,QAAAA,cAAc,EAAC;AAAhB,OAAd,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,KAAL,CAAWI,MAAX,KAAsB,CAAtB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,eAHd;AAIE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWU,SAAX,CAAqBC,MAJ9B;AAKE,MAAA,QAAQ,EAAGsB,CAAD,IAAM,KAAKD,gBAAL,CAAsBC,CAAtB,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAWE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,QAAQ,EAAGA,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAG,EAAC,GAAG,KAAKV,KAAL,CAAWU,SAAf;AAA0BE,UAAAA,GAAG,EAAEqB,CAAC,CAACC,MAAF,CAASnC;AAAxC;AAAb,OAAd,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEI,KAAKC,KAAL,CAAWU,SAAX,CAAqBG,KAArB,CAA2B+B,GAA3B,CAA+B,CAACG,IAAD,EAAOC,CAAP,KAAa;AAC5C,aAAO;AAAQ,QAAA,GAAG,EAAEA,CAAC,GAAC,CAAf;AAAkB,QAAA,KAAK,EAAED,IAAI,CAACzC,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCyC,IAAI,CAACxC,IAAxC,CAAP;AACD,KAFC,CAFJ,CAFF,CAXF,EAoBE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,qBAAhB;AAAsC,MAAA,OAAO,EAAE,MAAI,KAAKY,QAAL,CAAc;AAAChB,QAAAA,cAAc,EAAC;AAAhB,OAAd,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAyC,MAAA,IAAI,EAAC,QAA9C;AAAuD,MAAA,OAAO,EAAE,MAAM;AACpE;AACA,aAAKiB,MAAL,CAAY,KAAKpB,KAAL,CAAWU,SAAvB;AAAkC,OAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CApBF,CAFF,CADD,GA+BC,IAhCJ,EAkCG,KAAKV,KAAL,CAAWI,MAAX,KAAsB,CAAtB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAA+C,MAAA,WAAW,EAAC,WAA3D;AAAuE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWc,cAAX,CAA0BC,GAAxG;AACE,MAAA,QAAQ,EAAGkB,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACL,QAAAA,cAAc,EAAG,EAAC,GAAG,KAAKd,KAAL,CAAWc,cAAf;AAA+BC,UAAAA,GAAG,EAAEkB,CAAC,CAACC,MAAF,CAASnC;AAA7C;AAAlB,OAAd,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAME;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAA+C,MAAA,WAAW,EAAC,eAA3D;AAA2E,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWc,cAAX,CAA0BH,MAA5G;AACE,MAAA,QAAQ,EAAGsB,CAAD,IAAM,KAAKM,qBAAL,CAA2BN,CAA3B,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CANF,EAYE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAqC,MAAA,QAAQ,EAAGA,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACL,QAAAA,cAAc,EAAG,EAAC,GAAG,KAAKd,KAAL,CAAWc,cAAf;AAA+BF,UAAAA,GAAG,EAAEqB,CAAC,CAACC,MAAF,CAASnC;AAA7C;AAAlB,OAAd,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAKC,KAAL,CAAWc,cAAX,CAA0BD,KAA1B,CAAgC+B,GAAhC,CAAoC,CAACG,IAAD,EAAOC,CAAP,KAAa;AAChD,aAAO;AAAQ,QAAA,GAAG,EAAEA,CAAC,GAAC,CAAf;AAAkB,QAAA,KAAK,EAAED,IAAI,CAACzC,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCyC,IAAI,CAACxC,IAAxC,CAAP;AACD,KAFA,CAFH,CAFF,CAZF,EAqBE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,qBAAhB;AAAsC,MAAA,OAAO,EAAE,MAAI,KAAKY,QAAL,CAAc;AAAChB,QAAAA,cAAc,EAAC;AAAhB,OAAd,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAyC,MAAA,IAAI,EAAC,QAA9C;AAAuD,MAAA,OAAO,EAAE,MAAM;AACpE;AACA,aAAKiB,MAAL,CAAY,KAAKpB,KAAL,CAAWc,cAAvB;AACD,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CArBF,CAFF,CADD,GAiCC,IAnEJ,EAqEG,KAAKd,KAAL,CAAWI,MAAX,KAAsB,CAAtB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAA+C,MAAA,WAAW,EAAC,kBAA3D;AAA8E,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWgB,MAAX,CAAkBC,SAAvG;AACE,MAAA,QAAQ,EAAGgB,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAG,EAAC,GAAG,KAAKhB,KAAL,CAAWgB,MAAf;AAAuBC,UAAAA,SAAS,EAAEgB,CAAC,CAACC,MAAF,CAASnC;AAA3C;AAAV,OAAd,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAME;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAA+C,MAAA,WAAW,EAAC,sBAA3D;AAAkF,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWgB,MAAX,CAAkBJ,GAA3G;AACE,MAAA,QAAQ,EAAGqB,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAG,EAAC,GAAG,KAAKhB,KAAL,CAAWgB,MAAf;AAAuBJ,UAAAA,GAAG,EAAEqB,CAAC,CAACC,MAAF,CAASnC;AAArC;AAAV,OAAd,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CANF,EAWE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAO,MAAA,SAAS,EAAC,iBAAjB;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAA+C,MAAA,WAAW,EAAC,eAA3D;AAA2E,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWgB,MAAX,CAAkBL,MAApG;AACE,MAAA,QAAQ,EAAGsB,CAAD,IAAM,KAAKd,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAG,EAAC,GAAG,KAAKhB,KAAL,CAAWgB,MAAf;AAAuBL,UAAAA,MAAM,EAAEsB,CAAC,CAACC,MAAF,CAASnC;AAAxC;AAAV,OAAd,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAXF,EA0BE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,qBAAhB;AAAsC,MAAA,OAAO,EAAE,MAAI,KAAKoB,QAAL,CAAc;AAAChB,QAAAA,cAAc,EAAC;AAAhB,OAAd,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAyC,MAAA,IAAI,EAAC,QAA9C;AAAuD,MAAA,OAAO,EAAE,MAAM;AACpE;AACA,aAAKiB,MAAL,CAAY,KAAKpB,KAAL,CAAWgB,MAAvB;AACD,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CA1BF,CAFF,CADD,GAsCC,IA3GJ,CAFJ,CAnCF,CADF;AAiKD;;AAxV4D,C,CA2V/D;;AACA,MAAMiC,eAAe,GAAG,UAAUC,KAAV,EAAiB;AACvC,QAAM,CAACtC,GAAD,EAAMuC,MAAN,IAAgBjE,QAAQ,CAACgE,KAAK,CAACtC,GAAP,CAA9B;AACA,QAAM,CAACD,MAAD,EAASyC,SAAT,IAAsBlE,QAAQ,CAACgE,KAAK,CAACvC,MAAP,CAApC;AACA,SACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,gBAAnB;AAAoC,IAAA,KAAK,EAAEC,GAA3C;AAAgD,IAAA,QAAQ,EAAGqB,CAAD,IAAOkB,MAAM,CAAClB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,KAAK,EAAE;AAAEsD,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,SAAnB;AAA6B,IAAA,KAAK,EAAE1C,MAApC;AAA4C,IAAA,QAAQ,EAAGsB,CAAD,IAAOmB,SAAS,CAACnB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,kDAAlB;AAAqE,IAAA,OAAO,EAAE,MAAMmD,KAAK,CAAC9B,MAAN,CAAa;AAAER,MAAAA,GAAF;AAAOD,MAAAA;AAAP,KAAb,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CANF,CADF;AAcD,CAjBD;;AAmBA,MAAM2C,aAAa,GAAG,UAAUJ,KAAV,EAAiB;AACrC,QAAM,CAACnC,GAAD,EAAMwC,MAAN,IAAgBrE,QAAQ,CAACgE,KAAK,CAACnC,GAAP,CAA9B;AACA,QAAM,CAACJ,MAAD,EAASyC,SAAT,IAAsBlE,QAAQ,CAACgE,KAAK,CAACvC,MAAP,CAApC;AACA,SACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,KAAnB;AAAyB,IAAA,KAAK,EAAEI,GAAhC;AAAqC,IAAA,QAAQ,EAAGkB,CAAD,IAAOsB,MAAM,CAACtB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,KAAK,EAAE;AAAEsD,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,SAAnB;AAA6B,IAAA,KAAK,EAAE1C,MAApC;AAA4C,IAAA,QAAQ,EAAGsB,CAAD,IAAOmB,SAAS,CAACnB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,kDAAlB;AAAqE,IAAA,OAAO,EAAE,MAAMmD,KAAK,CAAC9B,MAAN,CAAa;AAAEL,MAAAA,GAAF;AAAOJ,MAAAA;AAAP,KAAb,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CANF,CADF;AAcD,CAjBD,C,CAmBA;;;AACA,MAAM6C,YAAY,GAAG,UAAUN,KAAV,EAAiB;AACpC,QAAM,CAACtC,GAAD,EAAMuC,MAAN,IAAgBjE,QAAQ,CAACgE,KAAK,CAACtC,GAAP,CAA9B;AACA,QAAM,CAACK,SAAD,EAAYwC,YAAZ,IAA4BvE,QAAQ,CAACgE,KAAK,CAACjC,SAAP,CAA1C;AACA,QAAM,CAACN,MAAD,EAASyC,SAAT,IAAsBlE,QAAQ,CAACgE,KAAK,CAACvC,MAAP,CAApC;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,YAAnB;AAAgC,IAAA,KAAK,EAAEM,SAAvC;AAAkD,IAAA,QAAQ,EAAGgB,CAAD,IAAOwB,YAAY,CAACxB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,KAAK,EAAE;AAAEsD,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,EAKE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,gBAAnB;AAAoC,IAAA,KAAK,EAAEzC,GAA3C;AAAgD,IAAA,QAAQ,EAAGqB,CAAD,IAAOkB,MAAM,CAAClB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAK,IAAA,KAAK,EAAE;AAAEsD,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,EAQE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,SAAnB;AAA6B,IAAA,KAAK,EAAE1C,MAApC;AAA4C,IAAA,QAAQ,EAAGsB,CAAD,IAAOmB,SAAS,CAACnB,CAAC,CAACC,MAAF,CAASnC,KAAV,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,kDAAlB;AAAqE,IAAA,OAAO,EAAE,MAAMmD,KAAK,CAAC9B,MAAN,CAAa;AAAER,MAAAA,GAAF;AAAOK,MAAAA,SAAP;AAAkBN,MAAAA;AAAlB,KAAb,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CATF,CADF;AAkBD,CAvBD","sourcesContent":["import React, { PureComponent, useState } from \"react\";\nimport { Input } from \"antd\";\nimport DropDown from \"./DropDown\";\nimport RequestHandler from \"../../actions/RequestHandler\";\nimport { AUTO_RESPONDER, GET_LIST_FROM_MAILCHIMP, GET_LIST_FROM_ACTIVECAMPAIGN } from \"../../actions/URLs\";\nimport ToolUtil from \"../../utils/ToolUtil\";\nimport { CampaignNameInput, LockTool } from \"../comman/Popup\";\n\nexport default class AutoResponderConfig extends PureComponent {\n  _mailServers = [\n    { label: \"MailChimp\", value: \"MAILCHIMP\" },\n    { label: \"Active Campaign\", value: \"ACTIVE_CAMPAIGN\" },\n    { label: \"Aweber\", value: \"AWEBER\" },\n  ];\n\n  state = {\n    mailServer: \"MAILCHIMP\",\n    mailData: {},\n    responderPopup:false,\n    formId:0,\n    auto_data : [\n      {\n        id : 1,\n        name : 'Mailchimp',\n        serverName : 'MAILCHIMP',\n        icon : '/asset/auto/mailchimp.png'\n      },\n      {\n        id : 2,\n        name : 'Active Campaign',\n        serverName : 'ACTIVE_CAMPAIGN',\n        icon : '/asset/auto/activecampaign.png'\n      },\n      {\n        id : 3,\n        name : 'Aweber',\n        serverName : 'AWEBER',\n        icon : '/asset/auto/aweber.png'\n      },\n      /* {\n        id : 3,\n        name : 'Constant Contact',\n        icon : 'asset/auto/constant_contact.png'\n      },\n      {\n        id : 4,\n        name : 'Convert Kit',\n        icon : 'asset/auto/convertkit.png'\n      },\n      {\n        id : 5,\n        name : 'Infusion Soft',\n        icon : 'asset/auto/infusionsoft.png'\n      },\n      \n      {\n        id : 7,\n        name : 'Sendiio',\n        icon : 'asset/auto/sendiio.png'\n      },\n      {\n        id : 8,\n        name : 'Mailvio',\n        icon : 'asset/auto/mailvio.png'\n      },\n      {\n        id : 9,\n        name : 'Getresponse',\n        icon : 'asset/auto/getresponse.png'\n      },\n      {\n        id : 10,\n        name : 'Sendlane',\n        icon : 'asset/auto/sendlane.png'\n      } */\n    ],\n    mailChimp : {\n      apiKey: \"\",\n      uid: \"\",\n      lists: []\n    },\n    activeCampaign : {\n      url: \"\",\n      apiKey: \"\",\n      uid: \"\",\n      lists: []\n    },\n    aweber : {\n      accountId: \"\",\n      uid: \"\",\n      apiKey: \"\"\n    }\n  };\n\n  handleResponderPopup(id, serverName){\n    this.setState({\n      responderPopup:true,\n      formId:id,\n      mailServer:serverName\n    })\n  }\n  componentDidMount() {\n    window.gs.navTitle(\"Setup Auto-Responder\");\n    if (ToolUtil.autoResponder) {\n      this.setState({ mailServer: ToolUtil.autoResponder.mailServer, mailData: ToolUtil.autoResponder });\n    }\n  }\n\n  onMailServerChange = (value) => {\n    this.setState({ mailServer: value });\n  };\n\n  onSave = (data) => {\n    const { mailServer } = this.state;\n    this.setState({ mailData: { mailServer, ...data } }, () => {\n      this.onInstall();\n    });\n  };\n\n  onInstall = () => {\n    const { mailData } = this.state;\n    RequestHandler.PostRequest(AUTO_RESPONDER, { userData: { ...mailData } }, (res, err) => {\n      if (res) {\n        if (res.data.success) {\n          ToolUtil.autoResponder = mailData;\n          window.gs.success(true, \"Autoresponder Save Successfully\");\n          this.setState({responderPopup:false})\n        } else {\n          window.gs.success(false, res.data.message);\n        }\n      } else {\n        window.gs.success(false, \"Something Went Wrong\");\n      }\n    });\n  };\n\n  getMailChimpList = (e) => {\n    this.setState({mailChimp : {...this.state.mailChimp, apiKey :e.target.value}})\n    let data = {\n      apikey : e.target.value,\n      action : \"getList\", \n      responder : \"Mailchimp\",\n    }\n    RequestHandler.PostRequest(GET_LIST_FROM_MAILCHIMP, data, (res,err) => {\n      if (res) {\n        let respData = res.data;\n        if(respData.lists) {\n          this.setState({\n            mailChimp : {\n              ...this.state.mailChimp,\n              lists : respData.lists\n            }\n          });\n        } else {\n          window.gs.success(false, res.data.message);\n        }\n      } else {\n        window.gs.success(false, \"Something Went Wrong\");\n      }\n    })\n  }\n\n  getActiveCampaignList = (e) => {\n    this.setState({activeCampaign : {...this.state.activeCampaign, apiKey :e.target.value}})\n    let data = {\n      url : this.state.activeCampaign.url,\n      apikey : e.target.value,\n      action : \"getList\", \n      responder : \"ActiveCampaign\",\n    }\n    RequestHandler.PostRequest(GET_LIST_FROM_ACTIVECAMPAIGN, data, (res,err) => {\n      if (res) {\n        let respData = res.data;\n        if(respData.lists) {\n          this.setState({\n            activeCampaign : {\n              ...this.state.activeCampaign,\n              lists : respData.lists\n            }\n          });\n        } else {\n          window.gs.success(false, res.data.message);\n        }\n      } else {\n        window.gs.success(false, \"Something Went Wrong\");\n      }\n    })\n  }\n\n  render() {\n    const { mailServer, mailData } = this.state;\n    return (\n      <div className=\"cz_auto_responder_wrapper\">\n        {/* <div className=\"row\">\n          <div className=\"col-md-6 col-sm-12\">\n            <div className=\"form-element\">\n              <div className=\"label-text\">Responder*</div>\n              <DropDown options={this._mailServers} onChange={this.onMailServerChange} value={mailServer} class=\"dropdown-style\" style={{ width: \"\" }} />\n            </div>\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-12\">\n            {mailServer === \"MAILCHIMP\" ? <MailChimpConfig {...mailData} onSave={this.onSave} /> : null}{\" \"}\n            {mailServer === \"ACTIVE_CAMPAIGN\" ? <ActiveCampign {...mailData} onSave={this.onSave} /> : null}\n            {mailServer === \"AWEBER\" ? <AweberConfig {...mailData} onSave={this.onSave} /> : null}\n          </div>\n        </div>\n        <br/><br/> */}\n        <div className=\"row\">\n          <div className=\"col-md-12 col-sm-12\">\n            <div className=\"cz_responder_box\">\n              {this.state.auto_data.map((item, index) =>{\n                return (\n                  <div className=\"cz_responders\" key={index} onClick={()=>this.handleResponderPopup(item.id, item.serverName)}>\n                    <i className=\"fa fa-check-circle\"></i>\n                    <img src={item.icon} alt={item.name} /> \n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n\n\n        {/* autoresponder popup  */}\n        <div className={this.state.responderPopup === true ? 'cz_autoresponder_popup active' : 'cz_autoresponder_popup'}>\n            <div className=\"cz_popup_close\" onClick={()=>this.setState({responderPopup:false})}></div>\n            <div className=\"cz_popup_box\">\n              {this.state.formId === 1 ? \n                <form>\n                  <h2>Mailchimp</h2>\n                  <div className=\"cz_responder_form\">\n                    <div className=\"form-elements\">\n                      <label>Api Key*</label>\n                      <input \n                        className=\"cz_custom_input\" \n                        type=\"text\" \n                        placeholder=\"Enter api Key\" \n                        value={this.state.mailChimp.apiKey} \n                        onChange={(e)=> this.getMailChimpList(e)}\n                      />\n                    </div>\n                    <div className=\"form-elements\">\n                      <label>Select Unique Id</label>\n                      <select className=\"cz_custom_input\" onChange={(e)=> this.setState({mailChimp : {...this.state.mailChimp, uid :e.target.value}})}>\n                        <option>Select List</option>\n                        { this.state.mailChimp.lists.map((list, i) => {\n                          return(<option key={i+1} value={list.id}>{list.name}</option>)\n                        })}\n                      </select>\n                    </div>\n                    <div className=\"cz_responder_btns\">\n                      <span className=\"cz_btn cz_light_btn\" onClick={()=>this.setState({responderPopup:false})}>Cancel</span>\n                      <button className=\"cz_btn cz_orange_btn\" type=\"button\" onClick={() => {\n                        // this.setState({ mailServer : \"MAILCHIMP\"}); \n                        this.onSave(this.state.mailChimp)}}>Submit</button>\n                    </div>\n                  </div>\n                </form> \n              : null}\n\n              {this.state.formId === 2 ? \n                <form>\n                  <h2>Active Campaign</h2>\n                  <div className=\"cz_responder_form\">\n                    <div className=\"form-elements\">\n                      <label>URL*</label>\n                      <input className=\"cz_custom_input\" type=\"text\" placeholder=\"Enter url\" value={this.state.activeCampaign.url} \n                        onChange={(e)=> this.setState({activeCampaign : {...this.state.activeCampaign, url :e.target.value}})}/>\n                    </div>\n                    <div className=\"form-elements\">\n                      <label>Api Key*</label>\n                      <input className=\"cz_custom_input\" type=\"text\" placeholder=\"Enter api Key\" value={this.state.activeCampaign.apiKey} \n                        onChange={(e)=> this.getActiveCampaignList(e)}/>\n                    </div>\n                    \n                    <div className=\"form-elements\">\n                      <label>Select Unique Id</label>\n                      <select className=\"cz_custom_input\"  onChange={(e)=> this.setState({activeCampaign : {...this.state.activeCampaign, uid :e.target.value}})}>\n                        <option>Select list</option>\n                        {this.state.activeCampaign.lists.map((list, i) => {\n                          return(<option key={i+1} value={list.id}>{list.name}</option>)\n                        })}\n                      </select>\n                    </div>\n                    <div className=\"cz_responder_btns\">\n                      <span className=\"cz_btn cz_light_btn\" onClick={()=>this.setState({responderPopup:false})}>Cancel</span>\n                      <button className=\"cz_btn cz_orange_btn\" type=\"button\" onClick={() => {\n                        // this.setState({ mailServer : \"ACTIVE_CAMPAIGN\"});\n                        this.onSave(this.state.activeCampaign)\n                      }}>Submit</button>\n                    </div>\n                  </div>\n                </form> \n              : null}\n\n              {this.state.formId === 3 ? \n                <form>\n                  <h2>Aweber</h2>\n                  <div className=\"cz_responder_form\">\n                    <div className=\"form-elements\">\n                      <label>Account ID*</label>\n                      <input className=\"cz_custom_input\" type=\"text\" placeholder=\"Enter account id\" value={this.state.aweber.accountId} \n                        onChange={(e)=> this.setState({aweber : {...this.state.aweber, accountId :e.target.value}})}/>\n                    </div>\n                    <div className=\"form-elements\">\n                      <label>List Unique Id*</label>\n                      <input className=\"cz_custom_input\" type=\"text\" placeholder=\"Enter list unique id\" value={this.state.aweber.uid} \n                        onChange={(e)=> this.setState({aweber : {...this.state.aweber, uid :e.target.value}})}/>\n                    </div>\n                    <div className=\"form-elements\">\n                      <label>Api Key*</label>\n                      <input className=\"cz_custom_input\" type=\"text\" placeholder=\"Enter api Key\" value={this.state.aweber.apiKey} \n                        onChange={(e)=> this.setState({aweber : {...this.state.aweber, apiKey :e.target.value}})}/>\n                    </div>\n                    \n                    {/* <div className=\"form-elements\">\n                      <label>Email List</label>\n                      <select className=\"cz_custom_input\" >\n                        <option>list</option>\n                        <option>list</option>\n                        <option>list</option>\n                        <option>list</option>\n                      </select>\n                    </div> */}\n                    <div className=\"cz_responder_btns\">\n                      <span className=\"cz_btn cz_light_btn\" onClick={()=>this.setState({responderPopup:false})}>Cancel</span>\n                      <button className=\"cz_btn cz_orange_btn\" type=\"button\" onClick={() => {\n                        // this.setState({ mailServer : \"AWEBER\"});\n                        this.onSave(this.state.aweber)\n                      }}>Submit</button>\n                    </div>\n                  </div>\n                </form> \n              : null}\n              {/* {this.state.formId === 2 ? <p>Active Campaign </p> : null}\n              {this.state.formId === 3 ? <p>Aweber</p> : null}\n              {this.state.formId === 4 ? <p>Constant Contact</p> : null}\n              {this.state.formId === 5 ? <p>Convert Kit</p> : null}\n              {this.state.formId === 6 ? <p>Infusion Soft</p> : null}\n              {this.state.formId === 7 ? <p>Sendiio</p> : null}\n              {this.state.formId === 8 ? <p>Mailvio</p> : null}\n              {this.state.formId === 9 ? <p>Getresponse</p> : null}\n              {this.state.formId === 10 ? <p>Sendlane</p> : null} */}\n            </div>\n        </div>\n        {/* autoresponder popup  */}\n      </div>\n\n    );\n  }\n}\n\n// uid, apiKey = \"\", fname = \"\", lname = \"\", email = \"\"\nconst MailChimpConfig = function (props) {\n  const [uid, setUid] = useState(props.uid);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n  return (\n    <div className=\"\">\n      <div className=\"label-text\">List Unique Id*</div>\n      <Input placeholder=\"List Unique Id\" value={uid} onChange={(e) => setUid(e.target.value)} />\n      <div style={{ height: \"20px\" }}></div>\n      <div className=\"label-text\">Api Key*</div>\n      <Input placeholder=\"Api Key\" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />\n      <div className=\"form-element\">\n        <button className=\"btn btn-sm pull-right ant-btn-primary color-with\" onClick={() => props.onSave({ uid, apiKey })}>\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ActiveCampign = function (props) {\n  const [url, setUrl] = useState(props.url);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n  return (\n    <div className=\"\">\n      <div className=\"label-text\">Url*</div>\n      <Input placeholder=\"Url\" value={url} onChange={(e) => setUrl(e.target.value)} />\n      <div style={{ height: \"20px\" }}></div>\n      <div className=\"label-text\">Api Key*</div>\n      <Input placeholder=\"Api Key\" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />\n      <div className=\"form-element\">\n        <button className=\"btn btn-sm pull-right ant-btn-primary color-with\" onClick={() => props.onSave({ url, apiKey })}>\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// uid, accountId, key = \"\", fname = \"\", email = \"\"\nconst AweberConfig = function (props) {\n  const [uid, setUid] = useState(props.uid);\n  const [accountId, setAccountId] = useState(props.accountId);\n  const [apiKey, setApiKey] = useState(props.apiKey);\n\n  return (\n    <div className=\"\">\n      <div className=\"label-text\">Account Id*</div>\n      <Input placeholder=\"Account Id\" value={accountId} onChange={(e) => setAccountId(e.target.value)} />\n      <div style={{ height: \"20px\" }}></div>\n      <div className=\"label-text\">List Unique Id*</div>\n      <Input placeholder=\"List Unique Id\" value={uid} onChange={(e) => setUid(e.target.value)} />\n      <div style={{ height: \"20px\" }}></div>\n      <div className=\"label-text\">Api Key*</div>\n      <Input placeholder=\"Api Key\" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />\n      <div className=\"form-element\">\n        <button className=\"btn btn-sm pull-right ant-btn-primary color-with\" onClick={() => props.onSave({ uid, accountId, apiKey })}>\n          Save\n        </button>\n      </div>\n\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}