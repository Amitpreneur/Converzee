{"ast":null,"code":"var _jsxFileName = \"/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/AutoplayVideo/Preview.js\";\nimport React, { Component } from \"react\";\nimport \"./Preview.css\";\nimport { parseImgUrl, youtubeUrlParse, vimeoUrlParse } from \"../../../Util\";\nimport Portal from \"../../../comman/Portal\";\nimport { getPath } from \"../../../../actions/URLs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Preview extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.getStyle = () => {\n      const {\n        elements\n      } = this.props.STYLE;\n      const style = {};\n      Object.assign(style, {\n        background: this.getcolor(elements, \"background\")\n      });\n      return style;\n    };\n\n    this.isUrlVideo = url => {\n      if (url.indexOf(\"youtube\") !== -1 || url.indexOf(\"youtu\") !== -1 || url.indexOf(\"viemo\") !== -1) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.hideOverlayData = () => {\n      let autoplayOverlay = document.querySelector(\".cz_autoplay_overlay\");\n      autoplayOverlay.style.display = \"none\";\n      let getIframeData = document.querySelector(\".iframe_autoplay\");\n      let src = getIframeData.src;\n\n      if (src.includes(\"?\")) {\n        getIframeData.src = src.split(\"?\")[0];\n      } else {\n        getIframeData.src += \"?autoplay=1\";\n      }\n    };\n  }\n\n  getcolor(element, key) {\n    let color = \"#fff\";\n    element.forEach(value => {\n      if (value.name === key) {\n        color = value.color;\n      }\n    });\n    return color;\n  }\n\n  getVideoURL(url) {\n    return parseImgUrl(url);\n  }\n\n  render() {\n    const video = this.props.video.url || \"\";\n    const style = {}; //this.getStyle();\n\n    const text = this.props.toolData.text;\n    const icons = this.props.icons;\n    return /*#__PURE__*/_jsxDEV(Portal, {\n      defaultOpen: true,\n      closeOnEsc: true,\n      closeOnOutsideClick: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-popup\",\n        style: style,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popUpTitlebar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-main-preview autoplay_video_preview\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => {\n                  this.props.onClose();\n                },\n                className: \"popupCloseButton\",\n                style: {\n                  position: \"relative\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-close\",\n                  style: {\n                    paddingLeft: \"102%\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cz_autoplay_vidoe_box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cz_autoplay_overlay\",\n                  onClick: this.hideOverlayData,\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: getPath(icons)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    dangerouslySetInnerHTML: {\n                      __html: text\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 23\n                }, this), this.isUrlVideo(video) ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n                  className: \"iframe_autoplay\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  frameBorder: \"0\",\n                  allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n                  allowfullscreen: true,\n                  auto: true,\n                  src: \"https://www.youtube.com/embed/\" + youtubeUrlParse(video)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(\"iframe\", {\n                  className: \"iframe_autoplay\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  frameBorder: \"0\",\n                  allowfullscreen: true,\n                  auto: true,\n                  src: \"https://player.vimeo.com/video/\" + vimeoUrlParse(video)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/opt/bitnami/apache/htdocs/converzee-frontend/src/components/pages/tools/AutoplayVideo/Preview.js"],"names":["React","Component","parseImgUrl","youtubeUrlParse","vimeoUrlParse","Portal","getPath","Preview","getStyle","elements","props","STYLE","style","Object","assign","background","getcolor","isUrlVideo","url","indexOf","hideOverlayData","autoplayOverlay","document","querySelector","display","getIframeData","src","includes","split","element","key","color","forEach","value","name","getVideoURL","render","video","text","toolData","icons","onClose","position","paddingLeft","__html"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Preview.css\";\r\nimport { parseImgUrl, youtubeUrlParse, vimeoUrlParse } from \"../../../Util\";\r\nimport Portal from \"../../../comman/Portal\";\r\nimport { getPath } from \"../../../../actions/URLs\";\r\nexport default class Preview extends Component {\r\n  getStyle = () => {\r\n    const { elements } = this.props.STYLE;\r\n    const style = {};\r\n    Object.assign(style, { background: this.getcolor(elements, \"background\") });\r\n    return style;\r\n  };\r\n  getcolor(element, key) {\r\n    let color = \"#fff\";\r\n    element.forEach((value) => {\r\n      if (value.name === key) {\r\n        color = value.color;\r\n      }\r\n    });\r\n    return color;\r\n  }\r\n  isUrlVideo = (url) => {\r\n    if (url.indexOf(\"youtube\") !== -1 || url.indexOf(\"youtu\") !== -1 || url.indexOf(\"viemo\") !== -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  getVideoURL(url) {\r\n    return parseImgUrl(url);\r\n  }\r\n\r\n  hideOverlayData = () => {\r\n    let autoplayOverlay = document.querySelector(\".cz_autoplay_overlay\");\r\n    autoplayOverlay.style.display = \"none\";\r\n    let getIframeData = document.querySelector(\".iframe_autoplay\");\r\n    let src = getIframeData.src\r\n    if(src.includes(\"?\")) {\r\n        getIframeData.src = src.split(\"?\")[0];\r\n    } else {\r\n        getIframeData.src += \"?autoplay=1\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const video = this.props.video.url || \"\";\r\n    const style = {}; //this.getStyle();\r\n    const text = this.props.toolData.text;\r\n    const icons = this.props.icons;\r\n    return (\r\n        <Portal defaultOpen={true} closeOnEsc={true} closeOnOutsideClick={true}>\r\n            <div className=\"image-popup\" style={style}>\r\n            <div className=\"image-preview\">\r\n                <div className=\"popUpTitlebar\"></div>\r\n                <center>\r\n                <div className=\"image-main-preview autoplay_video_preview\">\r\n                      <div\r\n                          onClick={() => {\r\n                          this.props.onClose();\r\n                          }}\r\n                          className=\"popupCloseButton\"\r\n                          style={{ position: \"relative\" }}\r\n                      >\r\n                          <i className=\"fa fa-close\" style={{ paddingLeft: \"102%\" }} />\r\n                      </div>\r\n                    <div className=\"cz_autoplay_vidoe_box\">\r\n                      <div className=\"cz_autoplay_overlay\" onClick={this.hideOverlayData}>\r\n                        <img src={getPath(icons)}/>\r\n                        <h2 dangerouslySetInnerHTML={{ __html: text }}></h2>\r\n                      </div>\r\n                      {this.isUrlVideo(video) ? (\r\n                          <iframe\r\n                          className=\"iframe_autoplay\"\r\n                          width=\"100%\"\r\n                          height=\"100%\"\r\n                          frameBorder=\"0\"\r\n                          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                          allowfullscreen\r\n                          auto\r\n                          src={\"https://www.youtube.com/embed/\" + youtubeUrlParse(video)}\r\n                          ></iframe>\r\n                      ) : (\r\n                          <iframe\r\n                          className=\"iframe_autoplay\"\r\n                          width=\"100%\"\r\n                          height=\"100%\"\r\n                          frameBorder=\"0\"\r\n                          allowfullscreen\r\n                          auto\r\n                          src={\"https://player.vimeo.com/video/\" + vimeoUrlParse(video)}\r\n                          ></iframe>\r\n                      )}\r\n                    </div>\r\n\r\n                    {/* <img src={BASE_URL + parseImgUrl(video)} /> */}\r\n                </div>\r\n                </center>\r\n            </div>\r\n            </div>\r\n        </Portal>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}